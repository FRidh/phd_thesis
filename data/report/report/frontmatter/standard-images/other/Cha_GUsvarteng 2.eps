%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: GU_Chalmers_eng.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: jayx
%%CreationDate: 11/24/08
%%BoundingBox: 0 0 535 47
%%HiResBoundingBox: 0 0 534.6523 46.9111
%%CropBox: 0 0 534.6523 46.9111
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.1 x420 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 12 8%%BeginData: 3024 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2EFF84535252527DFD78FFA8525253527D275252FD77FF52277D%A852527D525252FD4BFFA884FFA8FFA8FFFFFFA8FFA8FFFFFFA8FFA8FFA8%A87DFD04A8FFFFA8A8FD07FFA8FD04FFA85252527D522727A85228A8FFFF%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FD05FFA8%FFFFFFA8FFFFFFA8FD05FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8%FFA8FFFFFFA8FF5228525352A8AF27FF5227FF7D52FF5327FF7D277D277D%7D52275252522752A8FD05FFA8FD05FF7D525227F8272727FF7E27A8FFA9%52FF7D7D7DA8A87D7D7DA87D537D7E7D53FF7D7DA87D7D7D52A87DA87DFF%7D7D7DA8537EFFA97D7DA8A87DA87D53537D7DFF7D8452A87D7DA8A87D7D%A87DA8A87D7D7DFF7DA87DF8FFFFFFFD0427A827F87D5252FF7DF8522752%52277DFF2727277D525227A8FD06FFA8FD04FF7D28A827277D7D27FF7D28%53FFA853A8A8842852FF7DFF527DA87D52FF5252A8A852FF52FF7D7DFF84%28FFA852FF7D52527DFF4CFFA87D52FF52FF52FFA852527D7D52A8A8527D%A87D28A852FF7EA8527D7D53FFA85252535252A8A827522752275227A852%77277D5277277D7D527D52527D522753FD05FFA8FD05FF52527DA8A8FFA8%52A853277DFFFF52A87DA87E52A87DFFA828FF527DA87D527EA8527D7DFF%A87DFFA87DFFFF52FF537D52FFFFFD057DA87DFF52A8A852A853A852A87D%A927A8597D7D7D84A8A87D52A852A852A87D53FFA8FFFFA87DFFFFA88484%7DFD07A87DA8A8FFFFA8A87D7DFD07FFA8FD04FF7D275227527D7D525227%527DFFFFA87DFF7DFFA8A97DFFA8A8FFA87DA87DAF7DA87DAF7DFFA8A8FF%A97DFFFFA87DA8A8A8FFFFA87D7DFFA87DA8FF7DFFFD04A87DA87EA8A8FF%A8A87DFFA87DA8FF7EA8A8A97DA8FD25FFAFFD06FF522852F8FD04277D52%FD76FF7E5252535252525352FD78FFA87D5252527D7DFD7AFFA8A9A8A8A8%FD4CFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">GU_Chalmers_eng</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-11-24T08:57:26+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-11-24T08:57:26+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-11-24T08:57:26+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>24</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAGAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9S/Wbf1vQ9VPW6+lyHLp&#xA;X7PXFXG5thH6plQRA8efIca1pSvzxVcZohKIi6iUjkI6jkR4064q0J4CruJFKxEiRgwopXqGPanf&#xA;FWmurZYllaZBE2yyFhxNfA9MVWHULASGM3MQkB4lC61r0pSvXFV0d5aSyGOKeN5BWqKylhTrsDiq&#xA;5Z4GlaJZFaVN3jDAsPmOuKr8VWCZDM8IrzRVc+FHLAf8QOKrL69tbCyuL67kENraxPPcSt0SONSz&#xA;sfYKK4q+d9c88695m1ydtSubLRtFhFYbPV7iOK1WjB445YeXG4nkWP40c0VGb+7+F3khh+lWV5b6&#xA;zbWGkSyW+vRzzxLFZRTxTSpbLEyxLexyz27STxQO6IslKci0tXAxS98/KL8xJ/NFjcWOpH/ctYcX&#xA;EpVUae2k3ilZF+ASBSvqBPhBI6ElFBCvQsCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV84+WPKMthaWuma5+XWoa358i1Nri48yPMbe2mZrgut0dTjZpFRIyD6fA1p0qcKqeo/ln+aEn5X&#xA;3Vml1M0L6vJOvlYWkPqFDqJkEv1nl6lKfvPlthQidd8v/m9dfmFN+ZtnojEaXex2+m6a0/G7k0qI&#xA;tDNGtvx4VuBMZeTSVXsOmBUx0yDzRZ+X/wAzfLT+V9Wkn8z6h5gvNLvkii+qmO8tisAdmlWQM7R0&#xA;ACHqPoUsIv8A8r/zYl8o23lOSxnk0by6YNU0vjxL3E97JbcrYgn/AI9BNdEn+zChkOh+QtQtvP2u&#xA;3+teWri5hufMt5e20n6JtrwSWsk4aN1vJJ45IlO5oENOvemKpTp35N+c7aXTdauNPKwr5kkuL+G0&#xA;tY01eK1ExZJo7nmWkiavxIACB0r2VVvKvknzbp35lWFxbeWL1z+mnu9QutVtIf8AR4JH/eTRatbz&#xA;I054MSIyhWvjir6eyKUNH/x07j/jDD/xOXFUk/MhJ38ia56FeS2kkjhaVaJBzlUVDfajVh0whXyx&#xA;qXlnyhrml6Fpd9rUfl3VEmuWnuLlUaCRZI7ShIVoQjBeS7d4yhpTYoZlbeU/y/8AJPn3Q9Z0q8Gp&#xA;2mk24mvb4uHjL2+m3UThXWo5SSR2/FFJ4u1O4XFU9/JW4Go/mhrGqWluILK6gv7moWpZbq+SSP8A&#xA;eBFBVk48CsjD4SKKa4CllOpaBI3mHzHp76TLJ+l9d0TUbOVLZ2tntbY2bXbPcBGhShhuOSOwZuR2&#xA;PPdVLNF8r+YLfzHDcLYy3Hly+8wXtxc2dzA6NZNGZ2guIEkQfuJ4SisAKB1UjctihZH5W1q38t6X&#xA;q+g6TJFrcF/q2nXFrPA0TGz1a7mSGd0dKmOBngmG1BFzXbfFVaTyjbab+YKpDpDy6NZR6FbWr/o6&#xA;4mkaS3knDyRXiUSL0qxPcM1fUUca12xVKvLnl/VrS01yC+07UbOy1ix1e3tpNMtJ4pxy1Gd1+sIQ&#xA;3OUW0kZtH4r8BePrTFUVoXlma9n8uWmpeX3t7Fb3Vba6lgsbizjltXs/q8Fy0BDNaeq4qELDi3xj&#xA;jXZSmuhflt5cv7HzfDe6VLpxkvrtNPuY7aSGRLRkgeGS3XgOfCWDkgAPcUoxq2qIi0bX5fygnnit&#xA;rn/E+sGG/wBfgEbWl1I8k8b39vGp4EUt1eGOnUU3qa4qknmHy/PcSX7aBo09r5dl1Dy+1tZS6fP6&#xA;X1iC6Zr+5Ww4xSLCLUokvwqJKEV8VWUax5avdL0byrZNaC90Kwv3l8x6dYQu6SJNFOyOlsCzvBHd&#xA;yo5hUNQUoCFxVKLGxYXGjyav5bli8oQ/plI9Jgtbi6jW5mvI5LW6lsvTMyCaL12jDR/uuXH4cVQU&#xA;P5fi4g8ip5i0ia9uppLi31tpo5Ll4rE2d2lpFcSqHCem08Qry2ccq/DyChS1Hy3rIuNXENgx0c+b&#xA;9LuRZnTLmSeW0hFoJpo5g3H0QI5uQ9Jq/Fv8YxVDxeXZkXza7aJM9zenXI9LEel3UcqxT/FblpyP&#xA;TkVmRRFGEBQ79K4UonVPKuvQ6R5n0+40+bU4IdIht/LWp+g8t1PG8zvBFMoUS+tbfCjk0JUKzb1x&#xA;Qi9I0fWLJtDvr3S5n0/RPMV/KHt7Wfeyu7OcRSW+nlXuIIY7iRE9L4qFeYqu4CUD5o8qarcafYjS&#xA;9FKzvFr1z6TWciusdzeCazRJECi2uvQB9Av/AHbUBUYqml7bXdzq+qXGoaBdatc31zpc3lua7guK&#xA;Q2apBzQyIrfVJYJ1kllVynqe/TFD1vAl2KuxV2KuxV2KuxV2KuxVaIkErSgfGyqrH2Ukj/iRxVcQ&#xA;CCCKg7EHFXgXnT/nH5FnvJNOs31PTZyZLa2iaFbi3YRlRGfW4q8deAD8iyRgqqFz6mG1Ypo35EXV&#xA;zeH0vLc9o/FlR2kZIlduFHla8q6hasQYlfdRyRlYjCr6A8g+RrXypp0qF1uNTvWV7+7VSobgCEjT&#xA;kWbhHyNOTEklmO7YCrKMCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3F281DB7BB9811DD904DCBD281595249</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3F281DB8BB9811DD904DCBD281595249</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:2ed22396-dfbb-11dc-a218-000393ac1118</stRef:instanceID>
            <stRef:documentID>uuid:6CD1D8DCB6DBDC11853A8223FD93870C</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000067</stDim:w>
            <stDim:h>210.000145</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standardfärgrutegrupp</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -46.9111 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 46.9111 li
534.652 46.9111 li
534.652 0 li
cp
clp
[1 0 0 1 0 0 ]ct
158.145 37.4375 mo
157.71 37.4375 li
157.71 11.1025 li
158.145 11.1025 li
158.145 37.4375 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
204.028 39.376 mo
195.243 39.187 188.251 31.8828 188.441 23.0972 cv
188.533 18.8398 190.277 14.876 193.353 11.9312 cv
196.427 8.98682 200.465 7.41699 204.719 7.50879 cv
213.506 7.69922 220.497 15.002 220.307 23.7881 cv
220.215 28.043 218.472 32.0098 215.396 34.9541 cv
212.321 37.897 208.284 39.4678 204.028 39.376 cv
192.444 10.9839 mo
189.117 14.1709 187.229 18.4619 187.13 23.0688 cv
186.924 32.5771 194.492 40.481 204 40.688 cv
208.607 40.7891 212.976 39.0879 216.303 35.9009 cv
219.631 32.7148 221.52 28.4229 221.619 23.8159 cv
221.824 14.3071 214.257 6.40283 204.747 6.19775 cv
200.142 6.09717 195.773 7.79688 192.444 10.9839 cv
f
203.892 45.6855 mo
191.627 45.4209 181.865 35.2256 182.132 22.9595 cv
182.26 17.0186 184.694 11.4834 188.988 7.37451 cv
193.279 3.26367 198.915 1.0708 204.856 1.19971 cv
210.797 1.32764 216.332 3.7627 220.443 8.05469 cv
224.553 12.3467 226.745 17.9824 226.618 23.9238 cv
226.351 36.1895 216.156 45.9512 203.892 45.6855 cv
188.258 6.61133 mo
183.762 10.9165 181.213 16.7144 181.077 22.9365 cv
180.799 35.7847 191.023 46.4629 203.869 46.7412 cv
216.715 47.0195 227.393 36.7925 227.67 23.9458 cv
227.807 17.7246 225.509 11.8208 221.205 7.32568 cv
216.898 2.82959 211.1 0.279785 204.879 0.144531 cv
198.656 0.00976563 192.752 2.30566 188.258 6.61133 cv
f
209.01 37.2993 mo
200.36 38.8516 193.427 35.4844 192.158 31.3315 cv
191.338 28.6455 192.531 28.0615 192.72 26.1226 cv
191.223 26.9204 190.947 24.8413 192.269 24.6646 cv
193.668 24.4766 194.295 25.9463 193.614 27.9023 cv
192.635 30.7134 194.355 32.0186 194.838 31.8726 cv
194.859 31.7256 195.036 31.3662 195.119 31.2085 cv
193.942 29.7056 194.435 27.5103 196.443 27.3315 cv
197.26 27.2583 197.179 27.8535 196.611 27.9375 cv
195.07 28.1602 195.144 29.8794 195.784 30.0972 cv
195.897 30.0972 196.029 30.0674 196.142 29.9531 cv
196.116 29.6045 196.358 29.1055 196.758 29.2046 cv
197.645 29.4272 197.306 30.5586 196.697 30.6514 cv
196.468 31.3452 196.031 32.3164 196.126 32.8203 cv
196.218 33.3223 196.571 33.4224 196.861 33.1313 cv
197.074 32.9185 197.178 32.3994 197.315 31.8374 cv
197.169 31.2012 197.48 30.7183 198.017 30.9482 cv
198.39 31.1074 198.433 31.6792 198.065 32.1235 cv
198.017 32.6704 197.779 33.2886 197.831 33.7056 cv
197.884 34.1255 198.455 34.0972 198.661 33.8706 cv
198.866 33.6426 199.08 32.1646 199.163 31.8394 cv
198.843 31.5552 198.97 30.6836 199.628 30.6313 cv
200.402 30.5703 200.223 31.6226 200.004 31.8872 cv
200.222 32.7124 199.868 33.6392 200.025 34.0063 cv
200.183 34.3745 200.787 34.4634 201.059 34.1611 cv
201.332 33.8594 200.988 33.2256 201.141 32.4844 cv
200.88 31.8442 201.183 31.3315 201.564 31.3013 cv
202.428 31.2314 202.182 32.0112 202.024 32.5576 cv
202.067 33.1172 202.163 33.7852 202.357 34.3013 cv
202.482 34.6372 203.036 34.7134 203.221 34.2822 cv
203.336 34.0122 203.073 33.2505 203.01 32.7124 cv
202.637 31.8403 202.954 31.6025 203.289 31.5752 cv
203.608 31.5503 204.039 31.7275 203.983 32.5884 cv
204.156 33.1694 204.306 33.8682 204.522 34.3252 cv
204.619 34.6904 205.064 34.7275 205.206 34.3496 cv
205.343 33.9712 205.083 33.5273 204.804 32.9185 cv
204.184 32.3164 204.747 31.8535 205.101 31.8232 cv
205.454 31.7954 206.006 31.8916 205.889 32.8296 cv
206.081 33.3984 206.207 33.9185 206.333 34.2202 cv
206.48 34.5684 206.964 34.6104 207.172 34.3823 cv
207.38 34.1523 206.982 33.7515 206.878 33.2573 cv
206.41 32.8022 206.496 32.1812 207.029 32.1392 cv
207.302 32.1172 207.835 32.1465 207.785 32.9453 cv
207.942 33.2915 207.945 33.7295 208.174 34.1045 cv
208.453 34.5605 208.885 34.3882 209.058 33.9775 cv
209.227 33.5645 208.156 32.3672 208.992 32.2993 cv
209.831 32.2344 209.978 33.3315 210.249 33.5952 cv
210.521 33.8574 210.729 33.6836 210.857 33.5415 cv
211.077 33.2983 210.492 32.6392 210.9 32.4531 cv
211.723 32.0752 211.708 33.0142 212.291 33.0254 cv
214.839 33.0645 216.843 28.8823 216.546 27.7021 cv
215.694 27.1973 215.993 25.9355 216.706 25.9214 cv
218.462 25.8906 218.215 28.3691 216.883 31.2495 cv
215.136 35.0254 210.843 36.9702 209.01 37.2993 cv
f
211.279 16.731 mo
210.996 17.0029 210.102 17.061 209.644 16.7939 cv
209.265 16.5718 209.178 14.9092 209.369 14.46 cv
209.56 14.0098 211.514 13.9922 211.669 14.3008 cv
211.824 14.6099 211.563 16.459 211.279 16.731 cv
207.779 14.6748 mo
207.841 14.9131 208.074 15.9609 208.128 16.5908 cv
208.158 16.8262 208.074 17.1118 207.933 17.166 cv
207.581 17.2998 206.999 17.2681 206.681 17.147 cv
206.332 17.0132 206.568 15.625 205.289 15.377 cv
205.466 15.2529 205.558 15.123 205.593 14.8188 cv
205.616 14.6201 205.862 14.4038 206.163 14.3682 cv
206.749 14.3018 207.113 14.2852 207.312 14.292 cv
207.506 14.2969 207.716 14.4331 207.779 14.6748 cv
205.304 21.564 mo
204.557 21.5479 204.279 16.8882 205.051 16.9038 cv
205.742 16.9189 205.819 21.5737 205.304 21.564 cv
212.721 17.4258 mo
212.691 17.416 212.685 17.3662 212.691 17.3447 cv
213.084 15.834 213.371 15.1699 213.514 13.6641 cv
213.549 13.3037 213.291 13.0132 213.052 12.9521 cv
212.121 12.7207 211.692 12.729 211.331 12.7021 cv
211.293 12.6987 211.207 12.6812 211.181 12.6289 cv
211.074 12.4111 210.915 11.7529 210.912 11.4189 cv
211.457 10.2671 210.486 9.86914 209.571 9.88281 cv
208.97 9.854 208.357 10.1299 208.286 10.5811 cv
208.205 11.4541 209.168 11.7729 209.512 11.8027 cv
209.571 11.9268 209.712 12.5361 209.736 12.7769 cv
209.738 12.8091 209.708 12.8428 209.666 12.8428 cv
208.121 12.874 206.117 13.1431 205.102 13.2207 cv
204.957 13.2451 204.887 13.1602 204.856 13.0752 cv
204.666 12.5537 203.862 10.0947 205.373 10.144 cv
206.271 10.1709 207.021 9.43799 206.169 8.87891 cv
205.949 8.73584 204.804 8.59473 204.184 8.70215 cv
203.671 8.79102 203.422 9.37109 203.486 9.87793 cv
203.588 10.6729 201.608 10.7549 201.023 10.5181 cv
200.605 10.3491 200.091 9.85107 199.912 9.52979 cv
199.531 8.85107 198.873 9.36914 198.993 9.73291 cv
199.814 12.2061 202.431 11.814 203.114 11.8481 cv
203.149 11.8501 203.207 11.895 203.211 11.9131 cv
203.377 12.8071 203.91 13.748 203.908 14.0957 cv
203.582 14.458 203.721 15.2329 204.181 15.3662 cv
203.619 15.9048 203.367 17.7871 203.458 19.3481 cv
203.571 21.3379 204.375 23.2681 205.641 23.061 cv
207.249 22.7969 206.615 19.0771 207.006 18.7578 cv
207.202 18.6011 207.724 18.646 207.915 18.668 cv
207.96 18.6729 207.982 18.7231 207.98 18.7461 cv
207.852 20.207 207.507 22.5488 207.421 23.1729 cv
207.334 23.8101 207.281 24.1392 207.604 24.7271 cv
207.958 25.375 208.604 27.4341 207.848 29.6138 cv
207.824 29.6968 207.753 29.7251 207.729 29.7319 cv
207.047 29.8867 206.684 30.1011 206.434 30.269 cv
206.165 30.4521 205.877 30.833 206.073 31.063 cv
206.361 31.3237 208.196 31.2222 208.762 30.375 cv
208.777 30.354 208.815 30.2729 208.822 30.2549 cv
209.018 29.708 209.264 29.3091 209.448 28.958 cv
210.295 27.3418 210.419 25.356 209.258 24.459 cv
208.931 24.207 208.597 23.9668 208.915 23.3379 cv
209.531 22.123 209.595 20.793 209.673 19.6699 cv
209.703 19.2178 210.454 18.96 210.738 19.3857 cv
211.442 21.0537 210.889 22.4912 210.878 23.083 cv
210.864 23.6758 211.088 23.9502 211.166 24.3037 cv
211.644 26.478 211.403 28.2368 210.968 30.481 cv
210.966 30.5278 210.928 30.562 210.884 30.5762 cv
210.374 30.7471 210.063 30.853 209.743 31.0762 cv
209.42 31.3008 209.294 31.5908 209.434 31.749 cv
209.861 32.23 211.791 31.708 211.937 31.1548 cv
212.298 29.7808 214.898 26.5938 213.089 24.5581 cv
212.263 23.6289 212.263 24.002 212.256 23.5317 cv
212.251 23.3091 212.773 22.0752 212.903 21.1221 cv
213.041 20.1279 212.391 19.1851 212.553 18.6357 cv
212.558 18.6191 212.599 18.5928 212.616 18.5972 cv
212.885 18.6479 213.522 18.8169 213.934 19.0518 cv
214.063 19.123 214.281 19.0669 214.314 18.5752 cv
214.348 18.04 212.991 17.5239 212.721 17.4258 cv
f
196.391 24.2354 mo
196.127 24.0894 196.333 23.5605 196.713 23.5024 cv
196.981 23.4614 197.889 23.3516 198.206 23.4893 cv
198.449 23.5952 198.621 24.1064 198.483 24.2573 cv
198.223 24.5454 196.768 24.4443 196.391 24.2354 cv
193.356 22.5542 mo
193.331 22.2402 193.755 21.8853 194.081 21.9531 cv
194.343 22.0083 195.15 22.8613 195.188 23.0615 cv
195.257 23.4282 194.963 23.7173 194.719 23.7354 cv
194.338 23.7642 193.386 22.8984 193.356 22.5542 cv
193.517 20.8394 mo
193.332 21.0596 192.915 21.1992 192.715 21.0396 cv
192.414 20.7974 192.324 19.8135 192.519 19.3945 cv
192.649 19.1113 193.336 18.9565 193.463 19.2783 cv
193.552 19.5005 193.654 20.6772 193.517 20.8394 cv
193.75 18.0454 mo
193.418 18.2104 193.108 17.9854 193.076 17.5752 cv
193.04 17.1665 194.008 16.1646 194.356 16.2593 cv
194.527 16.3062 194.783 16.6313 194.754 16.9204 cv
194.735 17.1226 193.946 17.9473 193.75 18.0454 cv
198.977 21.6104 mo
198.629 21.4595 197.73 20.2764 198.052 19.9556 cv
198.352 19.6533 199.614 19.0132 199.816 19.2031 cv
200.6 19.9321 199.657 21.9063 198.977 21.6104 cv
195.3 21.3711 mo
195.3 21.1426 196.481 20.3394 196.948 20.5132 cv
197.323 20.6533 197.91 22.1274 197.592 22.2754 cv
196.732 22.6812 195.3 21.7476 195.3 21.3711 cv
195.594 17.7725 mo
195.763 17.7373 196.55 18.9575 196.406 19.4092 cv
196.285 19.7925 194.832 20.3315 194.688 20.1865 cv
194.245 19.7441 194.632 17.9756 195.594 17.7725 cv
199.162 18.0942 mo
199.162 18.4702 197.849 19.0996 197.586 18.9453 cv
197.203 18.7192 196.42 17.5586 196.583 17.3574 cv
197.149 16.6543 199.162 17.5034 199.162 18.0942 cv
198.035 15.5215 mo
198.117 15.6982 198.213 15.9355 198.03 16.1392 cv
197.875 16.3105 196.481 16.3574 196.273 16.3433 cv
195.833 16.3145 195.629 15.8652 195.775 15.6392 cv
196.04 15.2285 197.882 15.1924 198.035 15.5215 cv
201.098 17.3042 mo
201.054 17.5474 200.652 17.6416 200.477 17.6211 cv
200.265 17.5962 199.354 16.8853 199.295 16.6353 cv
199.219 16.3105 199.438 16.1016 199.647 16.0493 cv
200.212 15.9082 201.163 16.9541 201.098 17.3042 cv
201.876 20.5962 mo
201.67 20.7354 201.28 20.7583 201.115 20.5083 cv
201.001 20.3384 200.966 19.0742 201.04 18.8872 cv
201.119 18.6924 201.542 18.5474 201.784 18.6802 cv
202.058 18.8325 202.213 20.3735 201.876 20.5962 cv
200.527 21.8594 mo
200.743 21.8394 201.144 21.8872 201.261 22.1812 cv
201.389 22.5015 200.507 23.4995 200.099 23.6143 cv
199.849 23.6875 199.474 23.3105 199.543 22.9395 cv
199.588 22.6973 200.354 21.8745 200.527 21.8594 cv
202.875 19.0322 mo
202.729 17.2705 201.086 14.9414 198.687 14.5435 cv
196.079 14.1104 192.026 15.1543 191.588 18.9854 cv
191.135 22.9502 194.169 25.8955 197.813 25.6152 cv
201.766 25.3125 203.081 21.5264 202.875 19.0322 cv
f
197.175 3.65234 mo
197.061 4.54248 li
196.486 5.22949 li
197.375 5.34229 li
198.063 5.91846 li
198.175 5.02832 li
198.75 4.34229 li
197.862 4.22754 li
197.175 3.65234 li
cp
f
213.802 42.1602 mo
213.08 41.6313 li
212.186 41.5762 li
212.713 40.8521 li
212.769 39.9561 li
213.491 40.4873 li
214.385 40.542 li
213.856 41.2661 li
213.802 42.1602 li
cp
f
194.879 42.126 mo
195.603 41.6011 li
196.499 41.5488 li
195.973 40.8218 li
195.921 39.9258 li
195.196 40.4561 li
194.302 40.5068 li
194.828 41.231 li
194.879 42.126 li
cp
f
189.932 38.2813 mo
190.844 37.2124 li
191.258 36.7261 191.92 36.7603 192.552 37.2993 cv
193.188 37.8413 193.33 38.4922 192.916 38.9771 cv
192.004 40.0483 li
191.892 40.1782 191.888 40.2534 192.037 40.3804 cv
191.712 40.625 li
190.833 39.8765 li
191.028 39.519 li
191.177 39.6465 191.249 39.6304 191.361 39.499 cv
192.276 38.4263 li
192.458 38.2144 192.44 37.9521 192.156 37.7114 cv
191.864 37.4624 191.601 37.4834 191.418 37.6963 cv
190.505 38.7705 li
190.392 38.8994 190.388 38.9741 190.533 39.0981 cv
190.212 39.3462 li
189.408 38.6611 li
189.599 38.3022 li
189.748 38.4292 189.821 38.4121 189.932 38.2813 cv
f
187.003 34.7192 mo
188.931 33.2744 li
189.294 33.7593 li
188.689 35.7964 li
188.648 35.9375 188.539 36.1602 188.539 36.1602 cv
188.539 36.1602 188.713 36.0005 188.799 35.9341 cv
189.649 35.2983 li
189.783 35.1982 189.811 35.1274 189.692 34.9712 cv
190.061 34.7993 li
190.641 35.5732 li
190.376 35.8843 li
190.258 35.7261 190.181 35.7295 190.047 35.8291 cv
188.631 36.8901 li
188.493 36.9922 188.472 37.0635 188.59 37.2202 cv
188.219 37.3892 li
187.697 36.6934 li
188.244 34.8403 li
188.288 34.6953 188.401 34.4692 188.401 34.4692 cv
188.401 34.4692 188.224 34.6333 188.125 34.707 cv
187.401 35.249 li
187.264 35.3535 187.244 35.4243 187.361 35.582 cv
186.992 35.7524 li
186.409 34.9741 li
186.678 34.6685 li
186.795 34.8252 186.866 34.8223 187.003 34.7192 cv
f
187.745 31.0254 mo
188.246 32.0386 li
187.926 32.2896 li
187.839 32.1143 187.762 32.1025 187.613 32.1763 cv
186.027 32.9624 li
185.872 33.0371 185.84 33.1025 185.927 33.2793 cv
185.532 33.3804 li
185.032 32.3682 li
185.35 32.1162 li
185.438 32.2935 185.511 32.3062 185.665 32.2305 cv
187.251 31.4443 li
187.4 31.3701 187.438 31.3022 187.35 31.1255 cv
187.745 31.0254 li
cp
f
184.148 27.9941 mo
186.754 28.23 li
186.984 29.0073 li
184.919 30.605 li
184.77 30.7231 184.751 30.7842 184.802 30.958 cv
184.396 30.9863 li
184.077 29.9063 li
184.435 29.708 li
184.484 29.8623 184.548 29.8853 184.678 29.79 cv
185.677 29.0391 li
185.842 28.9243 186.193 28.7593 186.193 28.7593 cv
186.193 28.7593 185.807 28.8013 185.604 28.79 cv
184.348 28.668 li
184.181 28.6572 184.145 28.728 184.191 28.8892 cv
183.787 28.9199 li
183.502 27.96 li
183.86 27.7661 li
183.915 27.9463 183.959 27.979 184.148 27.9941 cv
f
186.076 23.9126 mo
186.289 26.2466 li
185.9 26.3716 li
185.882 26.1768 185.815 26.1377 185.649 26.1514 cv
183.886 26.3125 li
183.716 26.3296 183.66 26.3784 183.678 26.5737 cv
183.274 26.5225 li
183.071 24.2896 li
183.789 24.2246 li
183.882 24.5327 li
183.65 24.5864 183.601 24.6567 183.633 24.9937 cv
183.68 25.5137 li
184.409 25.4468 li
184.367 24.9756 li
184.348 24.7754 184.307 24.7056 184.151 24.7197 cv
184.2 24.3896 li
184.919 24.3237 li
185.032 24.6396 li
184.87 24.6533 184.843 24.7305 184.861 24.9316 cv
184.904 25.4004 li
185.697 25.3286 li
185.631 24.6084 li
185.602 24.2964 185.509 24.2456 185.291 24.2256 cv
185.324 23.8916 li
186.076 23.9126 li
cp
f
183.678 21.0703 mo
183.629 21.5205 li
184.493 21.6162 li
184.542 21.1826 li
184.578 20.8555 184.431 20.6655 184.168 20.6353 cv
183.904 20.6064 183.716 20.7485 183.678 21.0703 cv
186.401 19.8174 mo
186.301 20.7104 li
185.826 21.1035 185.085 20.6982 185.017 21.3096 cv
184.976 21.6714 li
185.553 21.7354 li
185.72 21.7544 185.787 21.7212 185.808 21.5264 cv
186.195 21.6543 li
186.071 22.7686 li
185.665 22.8115 li
185.687 22.6113 185.628 22.5654 185.463 22.5464 cv
183.703 22.3496 li
183.538 22.3315 183.47 22.3672 183.448 22.5635 cv
183.061 22.4302 li
183.233 20.9072 li
183.315 20.1704 183.666 19.7686 184.228 19.8315 cv
184.595 19.8726 184.827 20.0962 184.927 20.4873 cv
185.071 20.1235 185.428 20.0693 185.643 20.0493 cv
185.892 20.0273 185.981 19.9873 186.007 19.7583 cv
186.014 19.6904 li
186.401 19.8174 li
cp
f
187.027 17.8726 mo
186.845 18.4375 186.53 18.7915 186.374 18.9414 cv
185.802 18.5825 li
185.886 18.3203 li
186.248 18.3237 186.474 18.0356 186.57 17.7344 cv
186.645 17.5063 186.614 17.2324 186.371 17.1533 cv
186.16 17.0854 186.015 17.2153 185.779 17.6616 cv
185.544 18.1177 185.166 18.5264 184.58 18.3384 cv
184.009 18.1558 183.851 17.5405 184.061 16.8906 cv
184.218 16.3945 184.479 16.0508 184.625 15.8994 cv
185.166 16.2446 li
185.083 16.5015 li
184.768 16.5356 184.581 16.7944 184.505 17.0298 cv
184.423 17.2866 184.481 17.5063 184.673 17.5674 cv
184.86 17.6284 184.997 17.4917 185.171 17.1606 cv
185.489 16.5557 185.833 16.1606 186.474 16.3667 cv
187.102 16.5684 187.232 17.2354 187.027 17.8726 cv
f
188.371 14.6172 mo
187.854 15.6221 li
187.462 15.5161 li
187.552 15.3403 187.516 15.2729 187.367 15.1963 cv
185.792 14.3882 li
185.639 14.3101 185.567 14.3232 185.477 14.4971 cv
185.161 14.2412 li
185.676 13.2354 li
186.068 13.3433 li
185.979 13.5171 186.011 13.583 186.164 13.6631 cv
187.739 14.4702 li
187.888 14.5459 187.965 14.5361 188.055 14.3613 cv
188.371 14.6172 li
cp
f
188.51 10.4497 mo
188.322 10.356 188.208 10.3457 188.02 10.6025 cv
187.845 10.8418 li
189.368 11.9565 li
189.502 12.0557 189.577 12.0615 189.693 11.9028 cv
189.965 12.2046 li
189.302 13.1099 li
188.928 12.9458 li
189.049 12.7827 189.021 12.7139 188.885 12.6147 cv
187.363 11.4976 li
187.189 11.7368 li
187 11.9937 187.044 12.0986 187.19 12.25 cv
186.947 12.4727 li
186.389 11.9619 li
187.991 9.77686 li
188.65 10.1509 li
188.51 10.4497 li
cp
f
190.495 8.51123 mo
190.345 8.42334 190.037 8.16602 190.037 8.16602 cv
190.037 8.16602 190.258 8.51025 190.333 8.66113 cv
190.659 9.42725 li
191.225 8.89844 li
190.495 8.51123 li
cp
193.079 9.00439 mo
192.267 9.76123 li
191.935 9.52734 li
192.042 9.42725 192.052 9.3584 191.894 9.27734 cv
191.676 9.16406 li
190.885 9.90234 li
190.978 10.1313 li
191.047 10.3013 191.128 10.2793 191.244 10.1724 cv
191.455 10.5205 li
190.753 11.1743 li
190.42 10.9404 li
190.55 10.8184 190.569 10.7544 190.496 10.5801 cv
189.734 8.78418 li
189.686 8.67529 189.614 8.64111 189.474 8.77148 cv
189.267 8.42139 li
190.434 7.33008 li
190.771 7.56104 li
190.626 7.69531 190.646 7.75928 190.759 7.81445 cv
192.509 8.70215 li
192.668 8.78809 192.734 8.78027 192.869 8.65625 cv
193.079 9.00439 li
cp
f
194.774 7.96191 mo
194.27 8.2749 193.8 8.34082 193.583 8.354 cv
193.38 7.70996 li
193.614 7.56592 li
193.888 7.80078 194.247 7.72803 194.514 7.56201 cv
194.719 7.43604 194.873 7.20703 194.738 6.99023 cv
194.622 6.80176 194.427 6.80615 193.959 6.99219 cv
193.485 7.18896 192.93 7.25391 192.606 6.73291 cv
192.29 6.22412 192.567 5.65283 193.148 5.29297 cv
193.59 5.01807 194.012 4.92383 194.221 4.90479 cv
194.409 5.51709 li
194.179 5.66016 li
193.918 5.48096 193.607 5.55811 193.398 5.68701 cv
193.169 5.8291 193.07 6.03516 193.176 6.20605 cv
193.28 6.37305 193.473 6.35791 193.82 6.21777 cv
194.454 5.96289 194.972 5.88477 195.327 6.45703 cv
195.674 7.01709 195.342 7.60986 194.774 7.96191 cv
f
203.283 3.95508 mo
203.078 3.98193 203.042 4.05225 203.063 4.21191 cv
203.096 4.44629 li
203.116 4.60205 203.157 4.63721 203.259 4.62305 cv
203.231 5.00928 li
202.802 5.09619 202.728 5.28516 202.071 5.37305 cv
201.188 5.49219 200.386 5.16309 200.235 4.04395 cv
200.096 3.01514 200.694 2.40527 201.653 2.2749 cv
202.228 2.19727 202.673 2.36621 202.861 2.44531 cv
202.781 3.14014 li
202.518 3.17627 li
202.388 2.87012 202.108 2.7793 201.796 2.82129 cv
201.245 2.89502 200.995 3.24707 201.087 3.93311 cv
201.182 4.625 201.475 4.89307 202.016 4.82129 cv
202.146 4.80225 202.308 4.74219 202.394 4.68018 cv
202.344 4.31006 li
202.323 4.14893 202.275 4.09082 202.064 4.11914 cv
202.011 4.12695 li
202.041 3.72119 li
203.2 3.56396 li
203.337 3.94824 li
203.283 3.95508 li
cp
f
206.058 2.72266 mo
205.587 2.68457 205.341 2.92578 205.281 3.67578 cv
205.221 4.4248 205.425 4.70264 205.894 4.7417 cv
206.376 4.77979 206.612 4.53662 206.672 3.78662 cv
206.733 3.0376 206.537 2.76172 206.058 2.72266 cv
205.851 5.28955 mo
204.939 5.21582 204.331 4.74365 204.424 3.60645 cv
204.516 2.46973 205.191 2.09961 206.102 2.17383 cv
207.029 2.24756 207.626 2.7207 207.535 3.85645 cv
207.442 4.99365 206.777 5.36377 205.851 5.28955 cv
f
210.856 3.98535 mo
210.877 3.77734 210.847 3.6665 210.539 3.5835 cv
210.253 3.50439 li
209.756 5.3252 li
209.712 5.48633 209.733 5.55859 209.922 5.61133 cv
209.737 5.97217 li
208.656 5.67725 li
208.676 5.26953 li
208.871 5.32324 208.924 5.27246 208.97 5.11035 cv
209.465 3.28955 li
209.183 3.2124 li
208.874 3.12744 208.792 3.20752 208.704 3.39746 cv
208.407 3.25049 li
208.687 2.54736 li
211.299 3.26025 li
211.187 4.00928 li
210.856 3.98535 li
cp
f
214.023 7.85938 mo
213.024 7.35059 li
213.126 6.95557 li
213.306 7.04736 213.37 7.00635 213.445 6.8584 cv
213.754 6.25537 li
212.732 5.73438 li
212.425 6.33936 li
212.349 6.48828 212.355 6.56348 212.531 6.65234 cv
212.276 6.96924 li
211.276 6.46045 li
211.378 6.06641 li
211.558 6.15723 211.622 6.11816 211.698 5.96826 cv
212.501 4.39258 li
212.579 4.23926 212.57 4.16943 212.391 4.07715 cv
212.651 3.76221 li
213.648 4.27148 li
213.543 4.66357 li
213.368 4.57422 213.306 4.60938 213.228 4.76221 cv
212.981 5.24854 li
214.001 5.76855 li
214.249 5.28223 li
214.326 5.12939 214.318 5.05859 214.139 4.96631 cv
214.398 4.65234 li
215.397 5.16016 li
215.291 5.55322 li
215.114 5.46436 215.054 5.49951 214.976 5.65234 cv
214.172 7.23047 li
214.097 7.37939 214.103 7.45313 214.278 7.5415 cv
214.023 7.85938 li
cp
f
217.575 7.38379 mo
217.209 7.08398 216.87 7.14063 216.392 7.72168 cv
215.914 8.30176 215.924 8.64697 216.288 8.94678 cv
216.659 9.25293 216.993 9.18994 217.471 8.60889 cv
217.948 8.02881 217.947 7.68994 217.575 7.38379 cv
215.938 9.37256 mo
215.232 8.79102 215.004 8.05566 215.729 7.1748 cv
216.453 6.29492 217.219 6.37793 217.926 6.95898 cv
218.642 7.5498 218.864 8.27881 218.139 9.15771 cv
217.413 10.0386 216.656 9.96191 215.938 9.37256 cv
f
219.827 10.6074 mo
220.056 10.8906 li
220.243 11.1245 220.444 11.1387 220.617 11.0005 cv
220.785 10.8643 220.816 10.6826 220.621 10.4404 cv
220.389 10.1543 li
219.827 10.6074 li
cp
219.448 10.9126 mo
218.766 11.4614 li
219.038 11.7983 li
219.244 12.0557 219.479 12.0723 219.687 11.9072 cv
219.89 11.7437 219.916 11.4956 219.704 11.2305 cv
219.448 10.9126 li
cp
218.729 12.1533 mo
217.799 10.9976 li
218.054 10.6797 li
218.177 10.8325 218.254 10.8276 218.385 10.7207 cv
219.763 9.61133 li
219.896 9.50342 219.915 9.43164 219.792 9.27832 cv
220.158 9.09766 li
221.027 10.1772 li
221.495 10.7603 221.55 11.2583 221.137 11.5903 cv
220.945 11.7456 220.634 11.7505 220.401 11.6343 cv
220.546 12.0093 220.43 12.3433 220.169 12.5537 cv
219.729 12.9082 219.196 12.7314 218.729 12.1533 cv
f
223.409 15.2847 mo
222.157 15.9238 li
221.588 16.2148 220.99 15.9297 220.612 15.1895 cv
220.233 14.4458 220.351 13.7886 220.92 13.4976 cv
222.172 12.8599 li
222.325 12.7817 222.358 12.7148 222.268 12.5396 cv
222.663 12.4365 li
223.188 13.4668 li
222.871 13.7217 li
222.782 13.5469 222.71 13.5347 222.556 13.6128 cv
221.299 14.2524 li
221.05 14.3809 220.966 14.6274 221.136 14.9595 cv
221.31 15.3027 221.562 15.3838 221.811 15.2568 cv
223.068 14.6157 li
223.221 14.5366 223.253 14.4707 223.166 14.3008 cv
223.558 14.1938 li
224.039 15.1348 li
223.725 15.3945 li
223.636 15.2197 223.563 15.2065 223.409 15.2847 cv
f
224.52 18.1406 mo
224.404 17.7026 li
223.563 17.9258 li
223.674 18.3486 li
223.759 18.6665 223.964 18.7905 224.222 18.7227 cv
224.478 18.6548 224.603 18.4536 224.52 18.1406 cv
222.435 20.2935 mo
222.205 19.4238 li
222.504 18.8867 223.342 18.9946 223.186 18.4019 cv
223.092 18.0498 li
222.532 18.1978 li
222.371 18.2417 222.318 18.2944 222.369 18.4858 cv
221.962 18.5059 li
221.675 17.4229 li
222.039 17.2349 li
222.089 17.4307 222.162 17.4517 222.323 17.4097 cv
224.034 16.9565 li
224.195 16.9136 224.247 16.8545 224.195 16.6646 cv
224.603 16.6484 li
224.995 18.1309 li
225.185 18.8486 225.001 19.3496 224.456 19.4946 cv
224.099 19.5889 223.801 19.4648 223.567 19.1348 cv
223.564 19.5269 223.25 19.7065 223.059 19.8027 cv
222.832 19.9126 222.765 19.9824 222.822 20.2046 cv
222.84 20.2715 li
222.435 20.2935 li
cp
f
223.882 24.0132 mo
223.872 23.8071 223.806 23.7661 223.644 23.7754 cv
223.409 23.7861 li
223.251 23.793 223.214 23.8291 223.219 23.9321 cv
222.836 23.873 li
222.786 23.437 222.604 23.3481 222.571 22.686 cv
222.528 21.7974 222.923 21.0239 224.051 20.9692 cv
225.087 20.918 225.646 21.564 225.694 22.5322 cv
225.722 23.1113 225.517 23.5391 225.422 23.7212 cv
224.736 23.583 li
224.723 23.3184 li
225.039 23.2144 225.153 22.9424 225.137 22.6279 cv
225.11 22.0742 224.782 21.7939 224.089 21.8291 cv
223.392 21.8633 223.101 22.1333 223.127 22.6782 cv
223.133 22.8101 223.181 22.9751 223.235 23.0664 cv
223.608 23.0483 li
223.77 23.04 223.832 22.9971 223.821 22.7861 cv
223.819 22.7319 li
224.22 22.7959 li
224.278 23.9653 li
223.884 24.0684 li
223.882 24.0132 li
cp
f
222.241 27.4263 mo
222.595 25.1084 li
223.001 25.0811 li
222.973 25.2764 223.029 25.3291 223.195 25.3545 cv
224.944 25.6221 li
225.113 25.6475 225.179 25.6133 225.208 25.4185 cv
225.589 25.5664 li
225.25 27.7813 li
224.535 27.6724 li
224.52 27.3511 li
224.759 27.3535 224.821 27.2993 224.872 26.9634 cv
224.951 26.4482 li
224.227 26.3374 li
224.157 26.8042 li
224.125 27.0044 224.147 27.082 224.305 27.1064 cv
224.178 27.4131 li
223.463 27.3042 li
223.429 26.9712 li
223.59 26.9951 223.635 26.9282 223.665 26.7305 cv
223.736 26.2622 li
222.949 26.1411 li
222.841 26.8564 li
222.792 27.1675 222.872 27.2393 223.079 27.3101 cv
222.966 27.6265 li
222.241 27.4263 li
cp
f
223.224 32.0225 mo
220.971 31.1714 li
221.184 30.6055 li
223.227 30.0205 li
223.37 29.9805 223.616 29.9526 223.616 29.9526 cv
223.616 29.9526 223.386 29.8926 223.286 29.8535 cv
222.291 29.4795 li
222.136 29.4214 222.061 29.4346 221.993 29.6187 cv
221.649 29.3994 li
221.992 28.4946 li
222.394 28.5513 li
222.325 28.7344 222.37 28.7993 222.526 28.8584 cv
224.182 29.4814 li
224.343 29.5435 224.413 29.5225 224.482 29.3394 cv
224.824 29.5625 li
224.516 30.3765 li
222.66 30.9106 li
222.515 30.9492 222.263 30.9766 222.263 30.9766 cv
222.263 30.9766 222.497 31.0386 222.612 31.0825 cv
223.458 31.4014 li
223.62 31.4614 223.69 31.4414 223.759 31.2573 cv
224.102 31.4756 li
223.759 32.3877 li
223.357 32.3232 li
223.426 32.1396 223.385 32.0825 223.224 32.0225 cv
f
219.793 33.1406 mo
220.11 32.6367 220.503 32.3735 220.693 32.2666 cv
221.156 32.7578 li
221.009 32.9897 li
220.66 32.8984 220.369 33.1206 220.2 33.3867 cv
220.072 33.5908 220.033 33.8638 220.251 33.9985 cv
220.437 34.1167 220.61 34.0288 220.949 33.6558 cv
221.29 33.2725 221.76 32.9707 222.28 33.2979 cv
222.786 33.6187 222.787 34.2524 222.422 34.8296 cv
222.143 35.2715 221.806 35.5396 221.627 35.6475 cv
221.19 35.1797 li
221.334 34.9526 li
221.648 34.9985 221.894 34.7925 222.024 34.5854 cv
222.169 34.3564 222.168 34.1309 221.998 34.0205 cv
221.832 33.9175 221.665 34.0137 221.414 34.2925 cv
220.954 34.7988 220.522 35.0957 219.954 34.7358 cv
219.397 34.3838 219.435 33.7046 219.793 33.1406 cv
f
217.648 35.9961 mo
218.4 35.1509 li
218.753 35.353 li
218.622 35.501 218.64 35.5762 218.765 35.687 cv
220.087 36.8633 li
220.216 36.9771 220.289 36.9819 220.42 36.8369 cv
220.662 37.1641 li
219.911 38.0093 li
219.558 37.8062 li
219.689 37.6592 219.674 37.5869 219.545 37.4731 cv
218.223 36.2969 li
218.099 36.186 218.022 36.1772 217.89 36.3242 cv
217.648 35.9961 li
cp
f
215.768 37.6514 mo
216.231 37.2803 216.688 37.1582 216.904 37.1201 cv
217.182 37.7344 li
216.966 37.9063 li
216.667 37.7056 216.319 37.8203 216.074 38.0186 cv
215.885 38.1685 215.76 38.4121 215.92 38.6123 cv
216.058 38.7852 216.251 38.7583 216.693 38.5156 cv
217.141 38.2632 217.683 38.1313 218.067 38.6113 cv
218.442 39.0796 218.236 39.6792 217.703 40.1064 cv
217.297 40.4312 216.889 40.5762 216.685 40.6191 cv
216.424 40.0342 li
216.635 39.8662 li
216.916 40.0132 217.215 39.8994 217.407 39.7466 cv
217.619 39.5762 217.691 39.3604 217.565 39.2046 cv
217.442 39.0493 217.252 39.0884 216.925 39.2686 cv
216.325 39.5981 215.821 39.7373 215.4 39.2124 cv
214.988 38.6982 215.246 38.0693 215.768 37.6514 cv
f
199.463 44.3105 mo
197.956 43.8794 li
197.986 43.4688 li
198.181 43.5234 li
198.379 43.5815 198.442 43.5386 198.487 43.3774 cv
198.927 41.8418 li
198.819 41.8984 198.638 41.9224 198.332 41.8716 cv
198.458 41.4258 li
198.788 41.4385 198.986 41.4048 199.324 41.0977 cv
199.939 41.2725 li
199.272 43.6025 li
199.227 43.7637 199.267 43.8354 199.461 43.8926 cv
199.654 43.9468 li
199.463 44.3105 li
cp
f
202.592 42.1401 mo
202.318 42.1143 202.127 42.209 202.109 42.4004 cv
202.091 42.5952 202.257 42.7651 202.519 42.9131 cv
202.795 42.8164 202.99 42.6812 203.009 42.4863 cv
203.027 42.2949 202.852 42.165 202.592 42.1401 cv
202.474 43.397 mo
202.137 43.519 201.888 43.689 201.865 43.937 cv
201.844 44.1592 202.059 44.3413 202.381 44.3711 cv
202.695 44.4014 202.95 44.2671 202.97 44.0474 cv
202.995 43.792 202.777 43.5791 202.474 43.397 cv
202.339 44.8281 mo
201.508 44.749 201.01 44.3662 201.057 43.8623 cv
201.099 43.4263 201.469 43.2144 201.871 43.084 cv
201.543 42.895 201.269 42.6631 201.302 42.314 cv
201.344 41.8691 201.862 41.6123 202.635 41.6841 cv
203.374 41.7554 203.854 42.106 203.812 42.5513 cv
203.78 42.8994 203.472 43.0762 203.114 43.2012 cv
203.485 43.4033 203.81 43.6821 203.769 44.1182 cv
203.721 44.6211 203.146 44.9023 202.339 44.8281 cv
f
206.16 42.1699 mo
205.798 42.2051 205.611 42.4639 205.647 42.8359 cv
205.681 43.1841 205.888 43.396 206.235 43.3618 cv
206.554 43.3311 206.829 43.1079 206.79 42.7061 cv
206.764 42.4409 206.591 42.127 206.16 42.1699 cv
206.15 44.8369 mo
205.95 44.8564 205.566 44.8242 205.435 44.7422 cv
205.393 44.312 li
205.541 44.3521 205.755 44.3711 205.946 44.353 cv
206.484 44.3008 206.793 44.0298 206.861 43.4951 cv
206.763 43.6582 206.481 43.812 206.183 43.8408 cv
205.444 43.9131 204.982 43.522 204.923 42.9038 cv
204.862 42.2739 205.318 41.7759 206.115 41.7002 cv
207.04 41.6108 207.523 42.166 207.599 42.9639 cv
207.691 43.918 207.275 44.7295 206.15 44.8369 cv
f
210.903 43.8823 mo
209.386 44.2822 li
209.203 43.9136 li
209.398 43.8623 li
209.598 43.8096 209.63 43.7402 209.587 43.5791 cv
209.179 42.0332 li
209.115 42.1372 208.972 42.2515 208.681 42.3633 cv
208.564 41.9165 li
208.853 41.7593 209.006 41.6274 209.14 41.1914 cv
209.757 41.0283 li
210.376 43.3716 li
210.419 43.5313 210.491 43.5742 210.686 43.5225 cv
210.881 43.4712 li
210.903 43.8823 li
cp
f
16.3198 25.5557 mo
16.0708 26.3975 15.7646 27.3745 14.5586 28.4839 cv
13.4678 29.4795 11.6689 30.6089 8.22363 30.6089 cv
3.41992 30.6089 0.0898438 28.1006 0.0898438 23.3735 cv
0.0898438 18.2837 4.14795 16.2168 8.41602 16.2168 cv
9.96582 16.2168 14.0376 16.5796 15.8315 19.8208 cv
12.4536 20.8867 li
12.0898 20.3115 11.0146 18.8228 8.3916 18.8228 cv
5.32959 18.8228 3.61182 20.8286 3.61182 23.4126 cv
3.61182 26.3599 5.94678 27.9297 8.51172 27.9297 cv
11.4399 27.9297 12.3198 26.3975 12.7598 25.5747 cv
16.3198 25.5557 li
cp
true sop
0 0 0 1 nzopmsc
f
17.7993 16.6367 mo
21.1865 16.6367 li
21.1865 21.8428 li
29.1895 21.8428 li
29.1895 16.6367 li
32.5762 16.6367 li
32.5762 30.1489 li
29.1895 30.1489 li
29.1895 24.3506 li
21.1865 24.3506 li
21.1865 30.1489 li
17.7993 30.1489 li
17.7993 16.6367 li
cp
f
42.8569 20.79 mo
42.7617 20.6182 42.686 20.4272 42.6279 20.2549 cv
42.5698 20.082 42.5317 19.9102 42.5117 19.7192 cv
42.4551 19.8911 42.417 20.0439 42.3779 20.1973 cv
42.3018 20.3691 42.2451 20.541 42.1689 20.7139 cv
40.2817 24.8052 li
44.645 24.8052 li
42.8569 20.79 li
cp
40.7139 16.6372 mo
44.3687 16.6372 li
50.895 30.1489 li
47.106 30.1489 li
45.7661 27.1982 li
39.186 27.1982 li
37.8809 30.1489 li
34.188 30.1489 li
40.7139 16.6372 li
cp
f
52.6367 16.6367 mo
56.0249 16.6367 li
56.0249 27.6606 li
62.8486 27.6606 li
62.8486 30.1489 li
52.6367 30.1489 li
52.6367 16.6367 li
cp
f
64.8882 16.6367 mo
69.7681 16.6367 li
73.29 24.9048 li
73.6533 25.7856 73.7871 26.1489 73.978 26.9146 cv
74.1123 26.3408 74.2271 25.9956 74.6104 25.0576 cv
78.1323 16.6367 li
82.9731 16.6367 li
82.9731 30.1489 li
79.7783 30.1489 li
79.7783 20.6948 li
79.7783 20.293 79.835 19.9478 79.9111 19.4307 cv
79.7783 19.833 79.7212 19.9868 79.5283 20.4648 cv
75.4912 30.1489 li
72.4092 30.1489 li
68.3711 20.6567 li
68.1611 20.1396 68.1221 19.9868 67.9702 19.4307 cv
68.0273 20.0059 68.0454 20.1196 68.083 20.6367 cv
68.083 30.1489 li
64.8882 30.1489 li
64.8882 16.6367 li
cp
f
86.106 16.6367 mo
98.7002 16.6367 li
98.7002 19.0679 li
89.4941 19.0679 li
89.4941 22.1108 li
97.6021 22.1108 li
97.6021 24.5029 li
89.4941 24.5029 li
89.4941 27.7378 li
99.082 27.7378 li
99.082 30.1489 li
86.106 30.1489 li
86.106 16.6367 li
cp
f
120.137 26.0293 mo
120.93 27.6421 122.873 28.1074 124.709 28.0742 cv
125.532 28.0591 128.114 27.8813 128.083 26.2354 cv
128.068 25.2583 127.125 25.0464 126.396 24.9253 cv
125.84 24.8193 123.058 24.4463 122.424 24.3423 cv
121.176 24.1353 118.027 23.5972 117.974 20.5352 cv
117.962 19.8652 118.143 19.1733 118.476 18.6123 cv
119.574 16.7754 122.053 16.2534 124.197 16.2163 cv
126.167 16.1812 127.684 16.4414 129.094 17.1821 cv
130.485 17.9043 131.096 18.8892 131.372 19.3242 cv
128.171 20.1851 li
128.053 19.9761 127.775 19.4834 126.965 19.0962 cv
126.057 18.6714 124.889 18.6152 124.238 18.6265 cv
122.746 18.6533 121.22 18.9663 121.242 20.249 cv
121.258 21.1294 122.046 21.3452 123.064 21.5562 cv
123.621 21.6611 126.385 22.0723 127.019 22.1963 cv
128.594 22.4551 131.263 22.9834 131.313 25.9492 cv
131.39 30.2925 126.522 30.5381 124.55 30.5664 cv
122.329 30.5962 118.872 30.2813 117.07 26.8862 cv
120.137 26.0293 li
cp
f
105.013 22.3286 mo
110.41 22.3286 li
111.137 22.3286 112.438 22.2339 112.438 20.7217 cv
112.438 20.4536 112.401 19.9946 112.17 19.6685 cv
111.923 19.3438 111.597 19.0176 110.258 19.0176 cv
105.013 19.0176 li
105.013 22.3286 li
cp
101.625 16.6445 mo
110.928 16.6445 li
112.458 16.6445 113.855 16.7798 114.984 18.0806 cv
115.673 18.8848 115.865 19.8984 115.865 20.6836 cv
115.865 21.7168 115.521 22.9419 114.563 23.6685 cv
113.836 24.2236 112.898 24.4146 112.364 24.5117 cv
116.458 30.1577 li
112.57 30.1577 li
108.86 24.7217 li
105.013 24.7217 li
105.013 30.1577 li
101.625 30.1577 li
101.625 16.6445 li
cp
f
238.363 25.9702 mo
238.363 25.2241 238.383 24.7725 238.383 22.8291 cv
238.383 21.2793 238.363 20.0415 238.345 18.2754 cv
238.265 18.1982 li
236.382 18.0981 li
236.382 17.4321 li
241.995 17.4321 li
241.995 18.0981 li
240.405 18.1982 li
240.327 18.2754 li
240.308 19.748 240.286 22.9282 240.286 25.8901 cv
240.286 28.3652 240.857 30.0322 243.467 30.0322 cv
246.194 30.0322 246.979 28.4424 246.979 25.5195 cv
246.979 22.9663 246.942 20.1992 246.903 18.2754 cv
246.824 18.1982 li
245.018 18.0981 li
245.018 17.4321 li
250.218 17.4321 li
250.218 18.0981 li
248.297 18.1982 li
248.218 18.2754 li
248.158 20.3755 248.158 23.2612 248.177 25.6943 cv
248.198 29.0703 246.607 30.8765 243.309 30.8765 cv
240.073 30.8765 238.363 29.207 238.363 25.9702 cv
false sop
0 0 0 1 cmyk
f
251.596 30.0142 mo
253.52 29.915 li
253.597 29.8359 li
253.656 27.7363 253.656 26.1851 253.656 24.2222 cv
253.656 22.2612 253.656 21.1802 253.597 18.2749 cv
253.52 18.1982 li
251.596 18.0981 li
251.596 17.4321 li
255.346 17.4321 li
257.738 20.7871 260.467 24.7129 262.432 27.521 cv
262.471 27.521 li
262.432 23.7529 262.392 20.2002 262.354 18.2749 cv
262.272 18.1982 li
260.467 18.0981 li
260.467 17.4321 li
265.67 17.4321 li
265.67 18.0981 li
263.747 18.1982 li
263.668 18.2749 li
263.607 20.375 263.607 21.9263 263.607 26.8521 cv
263.607 30.7793 li
262.647 30.7793 li
260.212 27.3232 257.309 23.2612 254.834 19.728 cv
254.796 19.728 li
254.815 24.3213 254.874 27.874 254.913 29.8359 cv
254.991 29.915 li
256.797 30.0142 li
256.797 30.6802 li
251.596 30.6802 li
251.596 30.0142 li
cp
f
267.046 30.0142 mo
268.971 29.915 li
269.048 29.8359 li
269.088 29.2271 269.106 26.5771 269.106 23.9272 cv
269.106 21.2793 269.088 18.9434 269.048 18.2749 cv
268.971 18.1982 li
267.046 18.0981 li
267.046 17.4321 li
273.012 17.4321 li
273.012 18.0981 li
271.107 18.1982 li
271.029 18.2749 li
270.99 18.8062 270.972 21.5342 270.972 24.1831 cv
270.972 26.833 271.011 29.1689 271.029 29.8359 cv
271.107 29.915 li
273.012 30.0142 li
273.012 30.6802 li
267.046 30.6802 li
267.046 30.0142 li
cp
f
275.271 18.1577 mo
274.094 18.0986 li
274.094 17.4326 li
279.236 17.4326 li
279.236 18.0986 li
277.488 18.1777 li
277.411 18.2559 li
278.51 21.1025 279.806 24.5376 281.099 27.855 cv
281.14 27.855 li
282.102 25.1846 283.77 20.4346 284.418 18.2378 cv
284.358 18.1777 li
282.77 18.0986 li
282.77 17.4326 li
287.107 17.4326 li
287.107 18.0986 li
285.968 18.1577 li
284.948 20.749 282.592 26.8525 281.043 30.877 cv
280.512 30.877 li
278.49 25.9707 276.744 21.6909 275.271 18.1577 cv
f
288.188 30.0142 mo
290.112 29.915 li
290.189 29.8359 li
290.211 28.9321 290.25 26.5771 290.25 23.9272 cv
290.25 21.2793 290.211 19.0591 290.189 18.2749 cv
290.112 18.1982 li
288.188 18.0981 li
288.188 17.4321 li
296.805 17.4321 li
297.569 17.0981 li
297.864 17.0981 li
298.004 21.396 li
297.61 21.396 li
296.902 19.4141 296.274 18.4331 295.942 18.4121 cv
292.231 18.2173 li
292.173 18.314 li
292.152 19.2183 292.115 21.2983 292.115 23.4971 cv
292.998 23.4971 294.922 23.436 295.433 23.3989 cv
295.51 23.3203 li
296.216 21.9463 li
296.589 21.9463 li
296.572 22.4951 296.549 23.3403 296.549 23.8691 cv
296.549 24.3799 296.572 25.479 296.589 26.0674 cv
296.216 26.0674 li
295.51 24.438 li
295.433 24.3613 li
294.822 24.3413 293.074 24.3013 292.115 24.3013 cv
292.115 26.7949 292.152 28.7959 292.173 29.7969 cv
292.231 29.895 li
296.237 29.6802 li
296.572 29.6602 297.453 28.856 298.159 26.5391 cv
298.611 26.5391 li
298.354 30.3662 298.297 30.6802 297.962 30.6802 cv
288.188 30.6802 li
288.188 30.0142 li
cp
f
308.995 20.8477 mo
308.995 19.7676 308.524 18.9629 307.643 18.5498 cv
307.152 18.3145 306.543 18.1777 305.307 18.1777 cv
304.658 18.1777 li
304.599 18.2378 li
304.579 19.0806 304.562 21.6509 304.541 23.9487 cv
307.956 23.8496 308.995 22.7505 308.995 20.8477 cv
300.576 30.0146 mo
302.539 29.9146 li
302.615 29.8369 li
302.638 29.2666 302.677 26.5776 302.677 23.9277 cv
302.677 21.2798 302.638 19.1587 302.615 18.2759 cv
302.539 18.1978 li
300.576 18.0986 li
300.576 17.4326 li
302.342 17.4326 304.227 17.3926 305.228 17.3926 cv
306.777 17.3926 307.682 17.4897 308.406 17.7065 cv
310.292 18.2759 311.115 19.4927 311.115 20.8276 cv
311.115 22.7705 309.8 23.6938 308.191 24.2036 cv
308.191 24.2427 li
308.702 24.8315 309.585 26.4404 310.724 28.4414 cv
311.214 29.3066 311.686 29.9536 312.334 29.9937 cv
312.764 30.0146 li
312.764 30.6797 li
309.819 30.6797 li
309.743 30.6016 li
309.016 29.1299 308.505 27.9316 307.269 25.7349 cv
307.015 25.2827 306.777 24.9097 306.482 24.5757 cv
305.777 24.6758 305.111 24.7129 304.541 24.7129 cv
304.52 27.0498 304.579 29.2466 304.599 29.8369 cv
304.678 29.9146 li
306.482 30.0146 li
306.482 30.6797 li
300.576 30.6797 li
300.576 30.0146 li
cp
f
314.926 26.5396 mo
315.378 26.5396 li
316.065 29.0317 317.184 30.0718 318.556 30.0718 cv
320.165 30.0718 321.187 28.9927 321.187 27.5796 cv
321.187 24.1646 315.16 25.0264 315.16 20.7085 cv
315.16 18.8848 316.594 17.2168 319.087 17.2168 cv
320.363 17.2168 321.383 17.6084 321.599 17.6675 cv
322.189 17.0986 li
322.561 17.0986 li
322.68 21.3955 li
322.267 21.3955 li
321.441 19.0024 320.363 18.0195 319.027 18.0195 cv
317.869 18.0195 316.87 18.7856 316.87 20.0815 cv
316.87 23.3594 322.993 22.8496 322.993 26.9897 cv
322.993 28.9727 321.501 30.8765 318.438 30.8765 cv
317.596 30.8765 316.594 30.6797 315.731 30.1113 cv
315.337 30.8765 li
314.926 30.8765 li
314.926 26.5396 li
cp
f
325.252 30.0142 mo
327.175 29.915 li
327.253 29.8359 li
327.294 29.2271 327.312 26.5771 327.312 23.9272 cv
327.312 21.2793 327.294 18.9434 327.253 18.2749 cv
327.175 18.1982 li
325.252 18.0981 li
325.252 17.4321 li
331.218 17.4321 li
331.218 18.0981 li
329.315 18.1982 li
329.236 18.2749 li
329.198 18.8062 329.176 21.5342 329.176 24.1831 cv
329.176 26.833 329.216 29.1689 329.236 29.8359 cv
329.315 29.915 li
331.218 30.0142 li
331.218 30.6802 li
325.252 30.6802 li
325.252 30.0142 li
cp
f
335.302 30.0142 mo
337.403 29.915 li
337.48 29.8359 li
337.501 29.1104 337.54 26.5771 337.54 23.9272 cv
337.54 21.2793 337.54 19.1001 337.48 18.4121 cv
337.422 18.314 li
335.087 18.314 li
334.674 18.314 334.185 19.021 333.379 21.396 cv
332.988 21.396 li
333.144 17.0981 li
333.498 17.0981 li
334.066 17.4321 li
342.879 17.4321 li
343.449 17.0981 li
343.801 17.0981 li
343.958 21.396 li
343.566 21.396 li
342.741 19.002 342.27 18.314 341.859 18.314 cv
339.523 18.314 li
339.463 18.4121 li
339.445 18.8843 339.404 21.5342 339.404 24.1831 cv
339.404 26.833 339.445 29.1299 339.463 29.8359 cv
339.542 29.915 li
341.701 30.0142 li
341.701 30.6802 li
335.302 30.6802 li
335.302 30.0142 li
cp
f
348.967 30.0142 mo
350.909 29.915 li
350.988 29.8359 li
351.027 28.3652 351.047 27.4609 351.047 24.772 cv
349.418 22.3003 347.631 19.4531 346.748 18.1582 cv
345.434 18.0981 li
345.434 17.4321 li
350.438 17.4321 li
350.438 18.0981 li
349.025 18.1772 li
348.945 18.2549 li
349.908 19.8652 351.261 22.123 352.302 23.7329 cv
352.343 23.7329 li
353.422 21.8271 354.677 19.5132 355.305 18.2373 cv
355.246 18.1772 li
353.873 18.0981 li
353.873 17.4321 li
358.113 17.4321 li
358.113 18.0981 li
356.915 18.1582 li
355.775 19.8262 354.284 22.4551 352.911 24.7129 cv
352.911 27.4219 352.951 28.0703 352.971 29.8359 cv
353.048 29.915 li
355.051 30.0142 li
355.051 30.6802 li
348.967 30.6802 li
348.967 30.0142 li
cp
f
373.956 24.0464 mo
373.956 20.0815 372.402 18.0981 369.912 18.0981 cv
367.419 18.0981 365.828 20.0815 365.828 24.0464 cv
365.828 28.0103 367.379 29.9932 369.873 29.9932 cv
372.364 29.9932 373.956 28.0103 373.956 24.0464 cv
363.71 24.2422 mo
363.71 19.7861 366.438 17.2163 369.912 17.2163 cv
373.816 17.2163 376.074 19.9634 376.074 23.8506 cv
376.074 28.3052 373.346 30.8765 369.873 30.8765 cv
365.967 30.8765 363.71 28.1284 363.71 24.2422 cv
f
378.039 30.0142 mo
379.963 29.895 li
380.042 29.8174 li
380.063 29.1299 380.102 26.5771 380.102 23.9272 cv
380.102 21.2793 380.063 18.9629 380.042 18.2749 cv
379.963 18.1982 li
378.039 18.0981 li
378.039 17.4321 li
386.695 17.4321 li
387.46 17.0981 li
387.756 17.0981 li
387.895 21.396 li
387.5 21.396 li
386.794 19.4141 386.165 18.4121 385.832 18.394 cv
382.084 18.2173 li
382.024 18.314 li
382.006 18.8843 381.967 21.2983 381.967 23.4971 cv
382.849 23.4971 384.773 23.436 385.243 23.3989 cv
385.322 23.3203 li
386.028 21.9463 li
386.4 21.9463 li
386.383 22.4951 386.361 23.3403 386.361 23.8691 cv
386.361 24.3799 386.383 25.6172 386.4 26.2041 cv
386.028 26.2041 li
385.283 24.438 li
385.204 24.3613 li
384.635 24.3413 382.926 24.3013 381.967 24.3013 cv
381.967 26.7949 381.967 29.0122 382.024 29.8174 cv
382.104 29.895 li
384.224 30.0142 li
384.224 30.6802 li
378.039 30.6802 li
378.039 30.0142 li
cp
f
394.178 24.0464 mo
394.178 19.7485 397.081 17.2163 400.908 17.2163 cv
402.362 17.2163 403.205 17.4512 403.951 17.6685 cv
404.601 17.0981 li
404.894 17.0981 li
405.031 21.3965 li
404.617 21.3965 li
403.639 18.7651 402.244 18.0205 400.793 18.0205 cv
398.514 18.0205 396.296 19.7285 396.296 23.8506 cv
396.296 27.0684 397.906 29.9932 401.242 29.9932 cv
402.205 29.9932 403.245 29.7173 403.245 29.4043 cv
403.245 28.7363 403.265 26.9512 403.205 25.4404 cv
403.127 25.3623 li
401.204 25.2632 li
401.204 24.5952 li
406.698 24.5952 li
406.698 25.2632 li
405.287 25.3623 li
405.206 25.4404 li
405.169 26.6953 405.15 28.1094 405.169 29.6216 cv
404.933 30.1113 403.049 30.8765 401.064 30.8765 cv
397.062 30.8765 394.178 28.3843 394.178 24.0464 cv
f
419.107 24.0464 mo
419.107 20.0815 417.556 18.0981 415.063 18.0981 cv
412.57 18.0981 410.981 20.0815 410.981 24.0464 cv
410.981 28.0103 412.531 29.9932 415.024 29.9932 cv
417.517 29.9932 419.107 28.0103 419.107 24.0464 cv
408.861 24.2422 mo
408.861 19.7861 411.589 17.2163 415.063 17.2163 cv
418.969 17.2163 421.227 19.9634 421.227 23.8506 cv
421.227 28.3052 418.498 30.8765 415.024 30.8765 cv
411.118 30.8765 408.861 28.1284 408.861 24.2422 cv
f
425.9 30.0142 mo
428 29.915 li
428.079 29.8359 li
428.1 29.1104 428.138 26.5771 428.138 23.9272 cv
428.138 21.2793 428.138 19.1001 428.079 18.4121 cv
428.021 18.314 li
425.686 18.314 li
425.273 18.314 424.781 19.021 423.978 21.396 cv
423.585 21.396 li
423.742 17.0981 li
424.094 17.0981 li
424.664 17.4321 li
433.478 17.4321 li
434.047 17.0981 li
434.399 17.0981 li
434.557 21.396 li
434.164 21.396 li
433.341 19.002 432.869 18.314 432.457 18.314 cv
430.121 18.314 li
430.062 18.4121 li
430.041 18.8843 430.004 21.5342 430.004 24.1831 cv
430.004 26.833 430.041 29.1299 430.062 29.8359 cv
430.14 29.915 li
432.3 30.0142 li
432.3 30.6802 li
425.9 30.6802 li
425.9 30.0142 li
cp
f
436.325 30.0142 mo
438.25 29.915 li
438.326 29.8359 li
438.349 29.0903 438.387 26.5771 438.387 23.9272 cv
438.387 21.2793 438.349 18.8843 438.326 18.2749 cv
438.25 18.1982 li
436.325 18.0981 li
436.325 17.4321 li
442.018 17.4321 li
442.018 18.0981 li
440.389 18.1982 li
440.31 18.2749 li
440.271 18.8843 440.252 21.2002 440.252 23.3989 cv
446.747 23.3989 li
446.769 20.9644 446.71 18.7271 446.689 18.2749 cv
446.611 18.1982 li
444.981 18.0981 li
444.981 17.4321 li
450.673 17.4321 li
450.673 18.0981 li
448.75 18.1982 li
448.671 18.2749 li
448.652 18.8643 448.611 21.5342 448.611 24.1831 cv
448.611 26.833 448.652 28.9722 448.671 29.8359 cv
448.75 29.915 li
450.673 30.0142 li
450.673 30.6802 li
444.981 30.6802 li
444.981 30.0142 li
446.611 29.915 li
446.689 29.8359 li
446.71 29.1689 446.747 26.7363 446.747 24.4189 cv
440.252 24.4189 li
440.252 26.9121 440.271 28.7183 440.31 29.8359 cv
440.389 29.915 li
442.018 30.0142 li
442.018 30.6802 li
436.325 30.6802 li
436.325 30.0142 li
cp
f
452.049 30.0142 mo
453.975 29.915 li
454.053 29.8359 li
454.072 28.9321 454.111 26.5771 454.111 23.9272 cv
454.111 21.2793 454.072 19.0591 454.053 18.2749 cv
453.975 18.1982 li
452.049 18.0981 li
452.049 17.4321 li
460.668 17.4321 li
461.433 17.0981 li
461.726 17.0981 li
461.865 21.396 li
461.47 21.396 li
460.766 19.4141 460.138 18.4331 459.804 18.4121 cv
456.095 18.2173 li
456.034 18.314 li
456.017 19.2183 455.977 21.2983 455.977 23.4971 cv
456.859 23.4971 458.781 23.436 459.292 23.3989 cv
459.371 23.3203 li
460.078 21.9463 li
460.45 21.9463 li
460.432 22.4951 460.411 23.3403 460.411 23.8691 cv
460.411 24.3799 460.432 25.479 460.45 26.0674 cv
460.078 26.0674 li
459.371 24.438 li
459.292 24.3613 li
458.685 24.3413 456.938 24.3013 455.977 24.3013 cv
455.977 26.7949 456.017 28.7959 456.034 29.7969 cv
456.095 29.895 li
460.098 29.6802 li
460.432 29.6602 461.314 28.856 462.021 26.5391 cv
462.472 26.5391 li
462.216 30.3662 462.159 30.6802 461.824 30.6802 cv
452.049 30.6802 li
452.049 30.0142 li
cp
f
464.438 30.0142 mo
466.361 29.915 li
466.44 29.8359 li
466.497 27.7363 466.497 26.1851 466.497 24.2222 cv
466.497 22.2612 466.497 21.1802 466.44 18.2749 cv
466.361 18.1982 li
464.438 18.0981 li
464.438 17.4321 li
468.186 17.4321 li
470.58 20.7871 473.31 24.7129 475.271 27.521 cv
475.312 27.521 li
475.271 23.7529 475.232 20.2002 475.193 18.2749 cv
475.114 18.1982 li
473.31 18.0981 li
473.31 17.4321 li
478.512 17.4321 li
478.512 18.0981 li
476.589 18.1982 li
476.508 18.2749 li
476.449 20.375 476.449 21.9263 476.449 26.8521 cv
476.449 30.7793 li
475.488 30.7793 li
473.056 27.3232 470.149 23.2612 467.676 19.728 cv
467.636 19.728 li
467.656 24.3213 467.716 27.874 467.755 29.8359 cv
467.834 29.915 li
469.639 30.0142 li
469.639 30.6802 li
464.438 30.6802 li
464.438 30.0142 li
cp
f
488.877 26.9121 mo
488.877 25.0459 487.601 24.3213 485.873 24.3213 cv
483.813 24.3213 li
483.795 26.812 483.853 28.7959 483.872 29.8359 cv
483.971 29.915 li
484.344 29.9341 484.695 29.9341 484.932 29.9341 cv
487.582 29.9341 488.877 28.835 488.877 26.9121 cv
485.049 23.457 mo
487.365 23.457 487.955 22.3594 487.955 20.8481 cv
487.955 19.8071 487.582 19.021 486.777 18.6094 cv
486.267 18.334 485.539 18.1772 484.461 18.1772 cv
484.362 18.1772 484.146 18.1772 483.949 18.1982 cv
483.872 18.2949 li
483.853 19.3149 483.795 21.2393 483.813 23.457 cv
485.049 23.457 li
cp
479.887 30.0142 mo
481.81 29.915 li
481.89 29.8359 li
481.909 29.1504 481.947 26.5781 481.947 23.9272 cv
481.947 21.2793 481.909 19.1392 481.89 18.2754 cv
481.81 18.1982 li
479.887 18.0991 li
479.887 17.4331 li
481.34 17.4331 483.008 17.3921 484.166 17.3921 cv
485.6 17.3921 486.697 17.5093 487.582 17.7852 cv
489.132 18.2754 490.074 19.2764 490.074 20.709 cv
490.074 22.396 488.955 23.3989 487.679 23.7119 cv
487.679 23.7529 li
489.76 23.8501 490.998 25.0659 490.998 26.6563 cv
490.998 29.3271 488.602 30.7192 484.793 30.7192 cv
483.519 30.7192 481.457 30.6802 479.887 30.6802 cv
479.887 30.0142 li
cp
f
494.942 25.9702 mo
494.942 25.2241 494.964 24.7725 494.964 22.8291 cv
494.964 21.2793 494.942 20.0415 494.923 18.2754 cv
494.845 18.1982 li
492.961 18.0981 li
492.961 17.4321 li
498.574 17.4321 li
498.574 18.0981 li
496.984 18.1982 li
496.907 18.2754 li
496.887 19.748 496.868 22.9282 496.868 25.8901 cv
496.868 28.3652 497.437 30.0322 500.047 30.0322 cv
502.775 30.0322 503.56 28.4424 503.56 25.5195 cv
503.56 22.9663 503.521 20.1992 503.481 18.2754 cv
503.403 18.1982 li
501.598 18.0981 li
501.598 17.4321 li
506.798 17.4321 li
506.798 18.0981 li
504.874 18.1982 li
504.798 18.2754 li
504.738 20.3755 504.738 23.2612 504.758 25.6943 cv
504.777 29.0703 503.188 30.8765 499.891 30.8765 cv
496.651 30.8765 494.942 29.207 494.942 25.9702 cv
f
516.598 20.8477 mo
516.598 19.7676 516.124 18.9629 515.241 18.5498 cv
514.749 18.3145 514.143 18.1777 512.905 18.1777 cv
512.257 18.1777 li
512.199 18.2378 li
512.18 19.0806 512.16 21.6509 512.14 23.9487 cv
515.556 23.8496 516.598 22.7505 516.598 20.8477 cv
508.176 30.0146 mo
510.14 29.9146 li
510.216 29.8369 li
510.237 29.2666 510.275 26.5776 510.275 23.9277 cv
510.275 21.2798 510.237 19.1587 510.216 18.2759 cv
510.14 18.1978 li
508.176 18.0986 li
508.176 17.4326 li
509.941 17.4326 511.826 17.3926 512.826 17.3926 cv
514.377 17.3926 515.28 17.4897 516.007 17.7065 cv
517.889 18.2759 518.716 19.4927 518.716 20.8276 cv
518.716 22.7705 517.399 23.6938 515.791 24.2036 cv
515.791 24.2427 li
516.302 24.8315 517.186 26.4404 518.324 28.4414 cv
518.814 29.3066 519.285 29.9536 519.933 29.9937 cv
520.364 30.0146 li
520.364 30.6797 li
517.42 30.6797 li
517.343 30.6016 li
516.614 29.1299 516.104 27.9316 514.867 25.7349 cv
514.613 25.2827 514.377 24.9097 514.083 24.5757 cv
513.379 24.6758 512.71 24.7129 512.14 24.7129 cv
512.119 27.0498 512.18 29.2466 512.199 29.8369 cv
512.278 29.9146 li
514.083 30.0146 li
514.083 30.6797 li
508.176 30.6797 li
508.176 30.0146 li
cp
f
522.035 24.0464 mo
522.035 19.7485 524.939 17.2163 528.767 17.2163 cv
530.219 17.2163 531.063 17.4512 531.81 17.6685 cv
532.457 17.0981 li
532.751 17.0981 li
532.889 21.3965 li
532.476 21.3965 li
531.495 18.7651 530.101 18.0205 528.649 18.0205 cv
526.372 18.0205 524.154 19.7285 524.154 23.8506 cv
524.154 27.0684 525.764 29.9932 529.1 29.9932 cv
530.063 29.9932 531.103 29.7173 531.103 29.4043 cv
531.103 28.7363 531.121 26.9512 531.063 25.4404 cv
530.984 25.3623 li
529.061 25.2632 li
529.061 24.5952 li
534.557 24.5952 li
534.557 25.2632 li
533.145 25.3623 li
533.063 25.4404 li
533.027 26.6953 533.007 28.1094 533.027 29.6216 cv
532.791 30.1113 530.908 30.8765 528.924 30.8765 cv
524.919 30.8765 522.035 28.3843 522.035 24.0464 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.1%%For: (jayx) ()%%Title: (GU_Chalmers_eng.eps)%%CreationDate: 11/24/08 8:57 AM%AI9_DataStream%Gb"-6kuJ`rZ7pT35jog"0dE^(Ao'qf!!?ggfGN@FJ.*8<acblUrVa7PIUgGu%B:nC#-U5RY&F&L$rK#S7`LZ)R>&M$j/r=M>^tOH%r+@mj4'Gs87c)Oo]OC*96=Koi]\8C3.10M;=Kq"7*Y^MjY2_bNXm##<J6G$oqmY0l]lVnBgfN7t;PVfV[9)tS[EAG@Y-<%Vh3O[K%eT.GX>3Y+]U4t@-ghskif,d,i^"uanX*IVTfXRd3QgMq*FYut01\dVl?[I-uSjJpsLP&\'gr9lM/cC,qm;uaScmd87FF8KR*",$n%s5n4EX,kTo:93*#inrq0m8)9aB!'L\dY(>g(G2#V?$%(,M#8^F_e^/MHI4NC2m8.6DR`Hu'cm?+,B(*s5WlmEIJd(Eoj%IiCAt_`%s'5"Lg.sice)u'IdoNMjnbdlEii]6s>q^,A<`(h7Ilr4]<Ekg_k75gYlbMQ7a,PjhD)EuX9pBE.`.UV[e,>nDi)?KF=REmZ2em9%%k=-IQe)VlYMkeEZeX#+/8[DV#e@;5=08mIpJ/AhJHI;@mf!_"@*$>][3jJ::-%"+?8"H-g7^*3L[KB0E$B')UH@C7EYNc0mijIQW%4[0(8dOa[D!FN7]YLmqoGjrT`oXbRG(1A&#bV8ujVcoF.!'2VNqe^(Onb@\tqt(#e=0F^gmW="qR!2tHgHZkRSP#fcRQ!'3k4bqV%a`%4.6#+m,5Jt:/[Z*L7%tBm;$>LFQY@6?j_n`I1_-bAsXNe.h)b\jBrajhdb-nR>D3rGG:!^^4SqglbcZrXIo<=JB@4D*`Iq#BT%#tpOU=L1uD0;T;I.@9R?\SU#&]3NAEjYGHH&bC6m4PV02`L?)(!@3^jYnYIiIpsjsPF<qM_\qE//;#aqT/^bC$*K2-_OpT>c3So/%98k69)/"UeESgID6?,cQ-Y&A;a&4lMr/#"-AV@&U_3$O6)2jG"r5ggAjudr24-,AJa-!D[;C2*&/;<]5T@ad[+O?LknVZ;?=:45h%<g^//F`Dm*'E>r&nbV9A*]ZRV-^MXFiD3cKV@pm!pQ%He)ShIcqGD%Jj(#0#.E7jo$dY>5O!Eh-EPL;7=t_M%rkgKN4%5Ps406]5%k-$a/r/%8;^2\U\'<[6XYmeo1=&>-`p'tSmHXQ,>1ot@Z;&bOc.>;J%m0g>!N-?<`A"EL.]]$r^MQ")UfWg\+SQk:Rr13lJOn6k/%C?@Bdgi*X4qN'mmhsFYr=&?NZhcU:^54(.K/%YK>%r;&!Uis>aapQ>k3oGf.-F("?%5h0D?I^^<b;FEJU]9gjk)-bJ:C-sZs3(G1%-NEK5bQ$Z2QGjF8?iJAkpi$1>rm,`_DqA!;]CN_=/cOc0bPuEtoABP^r*QV2Zbm@S?iFtfQiHdZjo;^UJ'?5YmI2L,/,uaNidYBc%_CV*UGt74eb:[H4QGEM\467L'/XNqOqV+8kE:A(%46<ao5g&MFQu]_of.-6VgK;KRnL+>Ys,6c&bJi2fO(Rsl/JnEBd2_umcu/=%%^2SaXIg_T9,?=MU`W&0XT5<-=^AY8+?hl!@/#mO\"\6O6JiT'L`)!q&j+cG#rZ*`5=QB5Hh!j2dn+89n'5G';CT>(+Z\K/7Xr*J?%ruoD3Dc"K)hfeNsriWtDqtq7>9pLL^]@`_4%_"a+lsL2d%>*>2rU>^?]j`F*=5j9_%EF;Mk;cq,ZHKSmOlQA_AY,0U--b0;<unO+%DRj!R0uad'D%K,QfY;2G`i8VddKbaPE@ki5>lL;aJ97>4#YE8J]*L>g#ZEVVs,*NgDtoZf[ufu<]*r7Eq`BJSj%TFOj&a%,S?4%!%Uiq]m"!bJTr.T:rd2KHO1k[*nYB$agq)9iLg`RC1n_nep19*7\,L;b.b>ORuB$2%R[\:-"F7=Ff?'Em38dSLTZ+t^;HboA@SC?nL%'[<R>:*U/6F65(LJ&VutNq6;R0r7`a:]BZ8SGlmhs&IrqjF1s!q'/l65R<Vu%`C?oeolJS;*"K)D;podY#^siQM5j]A_P2P"*`C;%ColYq#61`KWoBA($"o0/`hUK+Ar/NQ@CQ5dRQgaPC:p:#elF[/(m)/F,Cf%Y:1(f*G\aU!6\"!BCd;\gkeP-XIAAOam:kqs54,`r%Dp<q2Y=<DIl_/<"c$sK%l1^Q0\bf[Gn''tX%P+q'1.Ho2[l_pDg,G^`a2_ZN\N-;9jMa:940AF(l`L,Ms3t`3TIK]9#mOBM)[$hU%?,[=Od!rh/dn8dP^Kmnk+55P*^Br0]=1.],3&'ZZPnnb'K).E2Wmke0O0)%Gl1mM\oS<#7YNPUP^,pl_BVmciMWuR3SkO'0a5;On%l>7r&:"EuILCF75ELC%Xj8[37[T]6_I_or&o)HmZ.mn0h-@LPJkYIhrg79!W=q+%`_]JX:or_/=DSQ$P,67!-hS5bTlE<\CeK5Ml%g\E2o^&2-]T=i%2O]Cm(q8PR*$"mTES^o^Yo[e0_!I""PgN0:XO0V]`[jqu7lkFuB\niaT*%8R-WBXDJ5Y-EoH3VNn<U,iMT&AEW%G+MpgQd.6fT#YD&&bm8rGMBQDJ_^MJlLJsVV]E:!a'[3Df(l4ED<Fq0l]$DGl&YaWDXI^Knka$`I%S`gI&st]o1QWZMs&](XfBNW%q3.<qrG+(UgNcQig(&2Hj/1qQqu_FrJ7!a-khgYAJ"4:LY2p`*qW0hpDQGK%\WtVNN%Y,_QX><?LOX#k0I;3rI4';DWE"Kqclc*P%E_3u?*)\lMirM<Vc^ert4&Ki(K#/aG/qg^*8Pk7P(/*9S'CR&[k5UQOBIEpUBNu$Jq-[@`hl`om@6*k]kBliT<a,OMhdG+!<t=0K%*;5Zt`?%J#4fo'se`D:3lu'3$G827qHe;%c:^:`O"2F-#dWk*-T'OpSVu!#\[Z[jSNL+CL$gS+Qmq^7or-\[hniupcbRg.L:\.o,%=_U4]p@IShe:]S^,W]:*cM"tLCN0ZUMh-ZGF"oG7$Lk>l?a#agMl^XU=3di]J2Jhf%h*f?K?8&FFW1's_Vk%cO]\*b3NbPFCN%I0%%Ad+;cD8$ld6[?!=mPnO>*7s406`Otg8_T^SNQ=<3O(6X7irZ\e_!lU;>fUb<eo#Ecp6pmm]E7g]X$(&<OgQ9DIO%A#>3f:4kCa*%3HH&]f1^V3+.[nM$J.*,p?fUEXnK@,JqHMl<N3[2Z3Y@rPcK#u/P"5!rUmo>47u(VRK5.N`r/R'+U_m]aY=CiYk,GQVUIXj_q]c%%@#OPul9E$kkqOdiLmZOf0p-2Lc]u+G2%/C;?.JuG7_aFgG8dZ7CTIJRiaStgauh[8R[o]C*Z_Dl.k'(J=b//jPoTi#^4<Kd%iWUj%+*MAqf>%=j9B6'C2JC^6n,Klg@MLdGFlK3rrf^o5s7pU)hJP#DT@s,i'<1u?B4KXa:C$KccX`WIc]:k)pg1GjIs5(^@2<]Q)#`Ui%n)oJO;jM.>K)]E1;jM%DFRC%fd!(MM^H*?9P\"I?FoDUOJ)YbjNORJePp5btld?kce:2fNYLQD0!L09Ta5N";Ni<9JMTA+iJ\iQ;%Nd,T5keq05X.!u)X4h<_n&fjW-m)EL&*0ZeIse:Z<qE5K-9>A+*U)i/_.Go3s3o*Y5!4$=GL*\[NYE\'0SS9K^roe_S\%@fooQr/%R)6MW\!6.2\)_&"WpncPls1Eo[Ug=WE`#!P/:""XRpj^.[ncOsdrct!@k7"<1hLR]+,XriRQms`TDCAs!Y'?WQ$U'!*qK2X@*m41%q0(B'eTVR1/8Lru;j<JqWAj6P)DKi7G,hGSI>/nG3`VPKPmmZ]cKjk'd4*<;^<q8*4tqa"1A1Rfa$qHKfl'V%q5o;I8MA<m`jU5?%JVus'bthXFV]MXL.M?HkcPV=3-scB=o*VpL\l6?!!sZHfpii8\.#JMk\q@+"?FZf"V8b%Ra#<R=p/^^mMk3i8\,hN[e7uWsrI,9L%lOO$M*N3k?fM&>Q$d%ut1\DcU[6O/`Q5<WsjO^SY[8Vh&>HQ2c)m'njU;PJBpJn*,.Xl+hLT.^V,%%YI50i?$#,Uo/^9dFaGCKd`%<0iE^Q2a5g3l$M+[I@F^[c!tKN+i/?3lT_]*b(q-H*hmsp=q4h!Q7!h57HD%j:)oIi"6`N"'#:74BY7WXQ8?kIB.?hl#8>&!:PaZ%.EF\uGG]GV8EK(/[/3j_h3htN/6XRJ`DS'%k+"TQR/sc%[G"h(j<9U".NGZhV+Qs%Nb>1TVbK1gJHI^:qGkG'N/Ojo9cL2!!#S%P%Wqk.jIQaj@?J>@9_C!?+P1F<Yd`PB#o-Eg]4UZ[&j%2BDiDWgQ"`rKl@ju/=T*(Bp.M(79<N?WoYO>ilI#s)p4M?6l+<OB`D'&1f%?(OgVWRCS$m1,s]UY\"$]ruqO?-OZOoD00J(Ah1eID)[F*0a'nXi@R-RbC*mqu=&1@h5U9F#SYu\_I[J2oH"`cjabj;SRV,QA0uF%fC67cg9`OQ#l_fEYUoZ/`'XDD;FcG<'kkM@,bGKlXUH]ZkNX&t/dp:)EJ<'U(k(mBMT7=jH`]))SY]eC&NoL5P"PO:Y)d`G2oFO4%]-=CnV:/r=7Z0-Ti;e]uVMJ_5euE2<<#*#^-*IN=Cqi(kmm+j:l(U_;V\o1!TlGkC/WWiq6'IY=2ghA[s'2IHLIV0O'D2Y\A>)VY%QT@_;4;\bE;"]^.p]@I`&l[``"rrt@dr:#kVgMTr$<iTt)YV4h1YQKGmA+G6OfT_lQ7F!7P(S:Z8n>`XLuX;bPs"m!ZE^d'.2E#$%B1*LOcAX>-hB-#jd!rCT.e7ju10%hPL[)(c>>8"iji**P//Rf3\u&"J'm'],D4(_.(/+LAUKG?V+6bSlcr4&,pIp_WOi*n8*s`=T%\"-^'ptBs`*H^V@fP!D`;o^H4r$rn[j%HfK/%)BlX)GOuV2UoO2/Dq8L-:m6YIDt7$"Z.?A<ic5QD>R/?]&\/JEp.r%[E8BA\`+r%-4foR]i0<WKpF!m9H,gY:9kY_C_pm&fkW$HBc$60EUT_>WE10-$2IZV]\=Qkl5bbm8L[Temn'3E26ii[ql'X[-kJ3O>7-q(F\r$8%N91'rMg,+N@OQlfGKBrB!fc>jMUG6'g*osu!Y94%q^J1IqUTLHZiC\Vp%pQU5_U]\HDAru<04;<K4d^%0&)qcil4\NCsiN>V.DB2%ngR"s&%GPQouod:54iWSdEjJD-VB)*F9000;^PJYOr^st/_<NHg%'F'CW(.UDV;XPq33(E)WX*J.s3&T@eINlCA[h3*XG),.S'qm%-VqJQ(*pL?6b,hdm^_pm8_LIQPfpEX)Foqn"9o(aBrBd'7#u/Y-+d@I*SuVrq6,u-<uN[?JGPoG$iU2[o[IRQ+%[R]V+>/mD2SNj%[>o5aWJ&QKLa_(LHV..#C$3$*lf3qsU9N*C,7SEKnH22njZ1j=6H*+JkM?H'4=)iGmXbq:KMdo*#&4\8h[G3#WG[]7fiB2E8[rk]%)oqfkWVA!TV8B"Q:q2_S?k8T@p$q$s91P@FJhkekrG(tpL%_GV?"[S\3T*Y@fcP\n"2_AZh>He,;^hI/Kh\5?^g*V_F8cn]Y2.,9%:-pnH=(AWY(A#sN;mQrQhcm+&_#+\sU26"c2b)]tRULXl9/uME>NLePCe9&uO]Nh76.9`;U3(A4>!(+!"/b#k(>#[\cJljoh28YH%GeC8jn^K;_2dsEb>;`u6cFUd<LNgbXVp>"]05p;jJ*ME`ZL^`$?LN=XMehMLe&8o(^G`@014,TC9J!?]]UpTOotuW_Vr&<cB=V[q%H19!\ZXC5$kqhVXgc5,?Y3l8eY^thT(YA&.WL[d>qe^QIpuq=piPEHdqRZ8r>\RF><paf!cd(.J[1A)G[oNku)iIKNgHRo[$g2JM%@gW.I?\[P^?D6@mM0cER9(Pb;e$WtTLV2GVJ)oMJ9TRo0QFZUgXaGD6r$&\'5Ju']b)H_VE8MG_pEjLr[V-b`Oh#humJ>udr4,nX%*bMR!K$D#FIqa>'h`97gb_s$i`,D\&W4D[<HC5JJ$W'^(j(M3iSUS>\G7m!FcA\)j;Pu``hu@dNrD'&Q@(2soqn03c@QSG=TCo!T%pJ%iqob-0HqoP72TfkKnBZA<)p%G^O4a/i5r[k;%`V8@?Br:UReCE03QJX,fEcBj;^M;kIq]lrnPNC]iFPV1c)V:rhrcPuJfP.KB%,L#K0ppljF&),lHlT0JpbC;-5l-io=WgSj<24]/$Q(=MlcGI/G=4LtiXZTIYqSLh>DKo0">2OP,:9i:D?;`PnS"8R#Ea5NQ6L/u>%s+B3GUf7/cp22@Ze,.],=8rojl,VV6WB^+20m/p87(R5227Lb#SaLEP])FS$;fhqanQkPQ@pGocQa`T&o*_%[(FjEGe]Qb:H:"P'%eF^^[lWliTfAF",p\f0u'PT*j9'phVQ^+V0fM;1,hEE903a7$f4GiA<k0eQ?Z-mAG:T(JPKcUAhPnu?Kbm?eBdu8HrjD82H:9U#I%,+[F(7k[rnBs+,tIX<N!k5'4!41a+Q@QU.9s3l-tVU"P\:6-2pcZ,N<$InJ*bACsOkM"DLc+J5)>&D<(HFWn?n=dGCM='rpG2jTc%MGgO"XrkFGJ(RN][%q!PIW=C04dp]/GeABB,Fq.SeEteKhFL'(jke-d/ZI2dmAal:-?QgRJ+_jnc`LFqG-7GrmM6Es]tN7eHqrnt%S#Lg#q(s2X'RJ_U5Ft":rj)-E+h#kgS`3d]Vm!"V1LH;+/Shh.J)3OGZ#`(]S8[5"[7dcqmf$P$'0::1-U*%0Nk!Q\A7pra`ElZt%9Ph)m52Va[l!hu93LP1Ps5WM>(-5`:76CIYE'>j8IIS(>SQ\fFg@7[k1o7mSQsH?=%gfb&@]TJ&@1#)%mUZo!`JJM3Fr<?sD"l$#%D[hahh3cr&U/%[(M;X5mo#WG,qRs63+j:9H(Z4V`IDATZH=cB<^?ciar.[tiDp_<acPs[?A@JUP`UI.,0=M<Fn#95qj7;C^1t/Fn%[WQd]P"+bKqVKHWQd47bF=QF"[#7t#l`P]I=>8V/hh,:Fh:_,;UMh5`^V3\phJ3AR(-?MCOn2XdfC_c5F=Q]?X?h,GU9HeoK3r-@%g0NNXb0rD#m3.q?rMQMuT=#-^Q#Y^I/a)3l^6S2qdrG'RY>5#IK:.S@PL$jRrn!5q2L3YpGBiUcWZ>ID;#>^K\7iQ%I'mlWDQ^b!%`dJ#=D"@)bfBK;V[2`E*rV0BbTA-mONaJ-!3L)MY?--E15I+oS.lY*+N3Sc=n)piGmlt_;I,/-(4Pb>?:ADE8FBc%8IIk4.0m:30%rk14.bfA?7GlI?IICm+YnFaun=/3GQik?VV5/.#1/AG0?ptF?W:R1>foC`!t9p`G<^Y\t#,&Wd$Z-!lf2S%n5j1eX0Hn9Ig:TEql%Iqdf4Aq(mr-=EqEq<['TDW9\G>jYR-mIncV4I_hXYJoA%@f,*ED#4s^7[XhQ0O)#im>:;<49#!Ik5>*g^]Hk]ZgR3Vs!I`_p/u*T%i>d*jOcs=%9&jsNn=:&4jjMHMkD?%9*u>S`[h#)Xk&0>=n@)?'0M<)&LUU="ITp/p]YJ252Q8pUkETPd4q"7GQT+!gF2/cF^$g+O%3rd@og>+l)Bp6/GpN._*qc]1mG3sC><ElhO!Xs:$b*XL(PJda\3A3S.%<cL3Ij:O)lo*5TAGO8d@]*c",]jBn/_E(m6%(<6mIcO)%:A6*:jA++Jl#pfp3d&7O8,`IWl?9?H7e$.[Vrks?&A;_GkCHAMAnIq<:.b?W4%39i6830Sc1k&Ylg*V,-d.QS@]-F\;?'FZX$)0j%s'8O#Q'>&<[+17%(@IK1MSr7eVmoDemo!VmaN)F.1Qb\fQU"oNmcc[@&0KdN16jqhW^b-^AJ&!anmlS]6]8(UgQt6W>Mu#=?6Qk!%V5=C'Qf\@`)u-Og3ns`Z7P/:ta7#Rh"-/G/jGsc;^c0gVgLk-Q>WND[r9L7:^uAsE8obW2o5,?.C1Fq;p[BWSR\9QFQ)EnB!Imdc%4'2c3T_9Rgk%7+jf`#/g4kU*dT7H=2YO<5.5CbQd)Y9BhRJDP4BE"hREk;7#[1?<3!57;T8.HeQ6&t<-4+j*CofHYJJA;0IpF]8#%cP\P]hA5+*jSNA1;!mm@XZTC]0$t3L-i7-mmQa8;d@62;deRC8:-[$VG'2%,2Y=n^Ie/16BI-Zmm%ghXZ#TI$\DR-7*D:]eRjKsV%l@ijFDBU$'g"102U)p"(jgRoO<_?k'R>F(?n\lYEq_e96bE.tMA!V=M6a'20mZ2tq0&B[hn1N=(:s@h)#N?0?V\I1!@)u"6.-oRb%<b_h#kfuAWoro5b]Ga"Xp"f*(]l"KQ49G6eB;AE@K=frX-_9b0lkp?(p*KWV'6K`;i,0@5i55]+SZjX-'+"!GXtfnCn7\&cOal`P%<.@lnn/b1?LfUY5?7*rI=&ALWT:oE,oChLH-4,PQ-_r`Gm^J`rLsioi0LY)-os?[lf%#Dr[(c;%:E3PgOp==tYLU1e8Q,Dd9/OAI%?;.&'m8p931O*F"]C&EN:`g)6]?923m&UF,q3?!0Lqu3aG:f/)QhZ>@.mBcm-&Xip1;e-)\M(K93ML#,Eb4fD:Mak/WNita40I*u%8TOi+r"7[j]asW9]<j^;UP5Nrac"oL"mK3o0IWlJfh1A6=]s&lU8@5&R<GD[R/6--Jb=HD$Zjj)Z)"Uk/+d''(\_cWm7H_o)#W2X%3jN^R.t*369r?!(IlnTJ3p?$H.VVGCrgrf7O0#.1($q^Dh7h-G?,'X<T1YGmJ%iFpY,I49Pq*9jfY_N:GG&qu\Rf\h@=^2^,Z.TS%U\P=X-#.S?@*IfAA&)36UCB1Sl.>4s@Dql+lfGA0\rU',G@^)cEP8^(I"V,c?W/.t+$At(<NgIt,[FhCC5EJ7.j+KdA)H1P%gOeQ%q)gP>3u`lAXt"!o#4,kZqg*8"RM%7Il"a=0+_de-M+f'oa=n;cOR+<#A0>]Fo2,:'JLgm0l]u9.;;JMg:ASi)Lh1gDb]e2sY__$4%Ebc.sPOl%i.*+s,r[Jq/T8,8"NObV*?l^LP2%J!Kh+Q7+in-c<"p$M2<lW/h8Y1g:$u-aj!'#qHp\S>l$ioEK1T8!Z35:I'Zf;'G%[Yfis):VD/;-/ROg&t,VHuD76\RZI7+AqN32\S2=Xq5+<,h_7n&%#^?jRkdZU/l;g3+NK.`D_k0%3R0JOVQa4CE;-g_6N8I!_U,\%0>mVY5")i(Jqmlc7X@Vb#u*XS:,a)tlL1An:TpLfTV#)O_'St%WkWbU7XI?Z\^[V'%I)^TGXk!jLuffX5-H'8CA[+6A4#k2@Xnc5%GT5F.f-A7nC%%*C,[s)R\S_$0ogN!!@PW+)r&$c@i:F4HY9BW6@k=o$<i$>%WcV,Drn^FIVLcQZNJb>8&qcmk+!"-h9t5Hc(5#JA%a:06t=3nmj?Oihd0Sq<Vd.ut[6s04%@GN].bLY=U//X"8-kr@)C$.O0O$/a/1_1hZ/gt'26;1M.,qo<Fk]$3[2B.8h-NeNIkd%!g%cHe(sj#:@H?S2Q:G:=jiYi)H]@0e5E3o?:QkFB^Hn$''^/E@Q+D=-<(fU+QH?RZ">2rCq1jA]<Z<Qd#c_C&C3G/B!pYbSaHjpL-^%-iTpYD^CaTS_M^<^Ak.eoAr.n(-Wl]W3M._I.*ftl^M0t$.+,p,HD1]RgP(CYb-Cf`s[ncjj5C6N%[bZq!ojY.YI#!R%o@Zjj3aV%(lic"1.Urfjf1$>Nn/Z9AO8]K2*4<D^Eaot`,RUpH&jn\YV@jf7frkP@WM+SJ!kk_A_HsI,BG]I?`9NXFUDkp$tlcnc>DRgfqqg;%>cpU9$L%Tmc6$AuG?U`Q+`qhYj)GH]L!"tjd`MC_66rLFaM<RufjBjZSZ7Z^30K'YbeRb1KktQ@)GAWGe!Y$>-UVAg7mCCO:=Ne_%T"SamcF_tW('e:U#rDkRoMO[)Ni!Z`p'f\N(/6KLTq188dpFC3SgI9Dq?W(7*Ehu,&R!2&m.8m%qepuDADr%S+50hF"B_0Fbk5Qf%bJl<*O8Yh&YUMBfK,oir.[/EIdA>LYO^2/ilAr+*Inl5^K1W>o)>*g9<eB#4Wh!Ro@D[U:M\L[3i6i0(_NuIPd#WS=ErMc/iKlC!%Z4*;`M!dMN7cO>SA3\q6Q6_,UImYQS^7hgY8#+;0ksA<\2U7q+GH]:prO`IT(q7@a4bL<bCC`l`q+J_USp#De>9W";Nd.`'LXS\I%Pe9Qi'TpQgR#3Ufg3$H$Pj98X%jkkFOd7/2/Ssl_7q:eI:mkm9D1?i!*)j3r2YO&0BF2bHo[=aqX>;C>pL5\35<5BGKMD`g.iAZ-%:%H-C`Y)70;K4!/pbkYT.mA_[)cYl8FJr<lTUs@niA(97oB#,[Vk*83.n:8rmd_skd%tC%jU1%iThE_)b8&$\6^OB1(V.4fkT%2+%%(]9Di!;>bko"U%Cr,(OkgD9NU=k.9k0Tr;d,bVpae;ARTSm=g%\5tRSj=`FhaYnb9@':&F*L3uTj(48TM+p=%%'DKSj=1^?).ZM%-`=X81Dmga)#3/cTZu-QZ`HOZ>-Fh[XaYiUCNjh;dKAO(>f&C><_r_Z9V5GXm%.P!e*/![jG?Mg44u8^.4_!a=Z56cU7@J<foj/e%#Ju\^<0.!0N@g-(IbhZImb[DhUrtg6@YQ&"7*[Kbn6sVX6OI?fp2P_]i2LY;*;Pfqpl;Zmm.F7,dHh61%eiVh8kr1M(CCe[pjVRi%i\h9@D)i1!R1c@IB53'PJg<e=?S=:sJjBT89U,P9OZ^=h=c[EaPn^u50L%-lkKeD2!,)]*at/9<MAZJT-0AjfR76#Q_BE#hZgKE"%Q&'Il9g/PQY"X:9oI9GfHD@`.jfD%NI8`fiAY8oMSijZ&?VWc-AiE:TUe6O)E3\"ho!"H(JLKQ8eVfoefUj;p/<\%tdn*UgZKLb3%S1QHMn,qa&p!"L<D?OJ-;[1e*plHUFZ_nS%#9F)7*!>*K">d0P2]]AV_aG+/GVK#t?WnLXhjg(X`.71%HOn!?Pa.=S'0*<8Up6/_%qS=m%T//8K`fcBL#+fB'<=#!I(3]U:X_;B2B);/CjN=?-5OS8?@$I-Dd;R]&?S8#Y^O\e-j(CQ)deQD*h;-b?h;.<c*V$&%4g*TT%@kUjt'AM-&1L[K[i(\U0c!n*U`u;WO,H7Y_=]_QrA0fjj8PX9k\+_,gLs8O*"/-r,Na,7_?Pa_sR`g0[.o3%jI,eWu;LEE?'uP@Y%6,0MRL_cCPaktkG6/37Sdc44\L;I1C3?p"@H?(ol$jMtCj"'Y=1Sg([n''%8"])Ie+n\57A]7TZHRD,].@r'4N>ogbO?=djrB>EC%p!RF"OGq#O=B^I85TZ?3k]B$@DAYKi4YduQLN_#"*QGJ<lsnLUn]5P1LX@&;L58b)0XsV"0a@XM_jEPA0X]T],D\NonAs[rUnNe7%Ohkj"n'B&U_B72h14bD6Iee76G\!$D*YC2)H;8L$%cG@P7*4,V,W=P+nk`E6-MkcBB2OtaLZ?HIgpkk_,6kFl)Mc%"-dE5YOAi'&%Qm$K.f09^]D1:R<0oR,I]/_EXqH3U-@C[pn(Gj*$arb2Qmr6?m]q2mJKG9SgVJuP8&PB3!^8*5epBGc`8>mU%4>e'<8HmaOH:1f8%TSp'^p.eu8SIZP*k9"n3>c.D=7a?dQ;:(Ga\8g]L%2PWuCd))\Y4#gNfd"ml\5BO8Zff5G08]4MA'0R*q8hNR\8g]L8WVl@cJ0''%iSn_]Ql167S@Z6W/_"g>I(15%/E'\9I48YskucRf\,56EAWDV+>V_hN>@r_Km"plBDXUqmSmIIO-t=N5L3@mH[2A[l(Yac`cU3]s%Q2$It\ZhX=GEL#bq#1lOQ`1J"53W3/Z,eh^3Qf5b[K3gFA.s\K$Wr4I081uH/cmA/O5;jeI2hU']?7@!_L*nS)t&0eSfCaP?D7<Q%qDQ!(No`0,C1i'6QkZBOm>PHm@Oo.#oUpEaE'"rC_aB<0,)="S_H4tR]59%:.uh8,I<%%T=+meA!\Bg,N>Y:Ia@Q:'B8d_-d+J+K%;SW/J6Un(>),7[[.O2>VH+YsF^IuX=Km(JO2kcMPaiI$?A20_QAu'%R#!0`"V0knF5uK=0*AkhCfu&uf$+mmPcLk=rN8$$E(!buP%K4aEXOp\*DfHgLTGZ*K%(sD!d)(lYA0Yc_RWGm:Pat]a0iI4@a[,Xc4A$84R9[f,%iO]#nCghN95DQ`\5#EN][DN"X6fcenPJg`e%Hk^FnZ,E$FaPDId*6?c7_F933lS*PMn0Pui*\L7r>MquA^5XEE#E1`8(,A8i\O$Mj&BLoq7M/MVTY.$N*i'>1N*hR&-0NX5iQeWr%?d?sKo$t_A8n\$7\+O7uG4!c(MdG+Dq=&ZBWqt[`B4LJk;m*@Uppk(UmsCs/EjesHnu_g4B%JDS=<*I82rIKGlHMD35AgUFYp.N5%9jM%sL*BU7.:DJBV46eHA@F4Ka_n5iT<!:6dpRp$<n8%H'0<P!VOd>Smn(W=W>TkR,;$fNDsHY"@]-O;GK%Uu>cd`l/lq$r5"c#>%%B"`aB:Tq?WRkgh)a87E9?9/`:X-,5/6@^cSSI9(pSS=gg/A1Hj3H!3%(k9$A@H87\^S6uWNQW!id6',PNUsu;MO"Q8hT)C_lMin%GBY^`+V-\W43\QWW8D,<hV5p$8pL"Bar)KW]psD&q<,W[<e_A+<u[]9?Za/TYKa!ig-*7A`G$G:\WdkNh`'US&gkAtA^1*"6nJ(V%"q5HC:@22B%4mF/=_)mO/$''O+&[L1'b%+l-_</)Q=%7RbgfNCai+[fONZqMmJE&O<\GFuHSuX%28Wh:IpCkRO3%"e_@?O$>aG2b%GMf^GlLl/phmWeF,<]hFJ3Ti3Y<n!<j0B1%h)D;d9?)[t%eTg-O/I3_Cq@i>R$"]=ic=8b(`QC3?/3qMA'_#Fg+VL2VAhDaEVO$[%?QtO]Rk@I=GCAL]bGNI+6cc4ZF9>(p&[LZ<bK7;:)8+N&B%+`p=TUNYN@C>L/se1N[V+6/\i@Y_-FRR*Cq;miDE!n7j^*WaZg$Ii%l,^"ICGoJRO94ua9\FN-\TD7SBcPfJEQW"IdlY!S]"%EC*G1hpFE-U(YU@**flV4.p!9f]1n-*<A)k_/Mp%q9"_7KF_`enV.@VsX%(aUm@IctUZ5Qb<4TYf?s:%W!V_-B$aaCEJlMiWE2G;``3"3ctLR8"Ka5"73dN]!:Yc?RX2];15'VMd`paF4Lk,!%K8\)\J<LWu]S%;b;W1nb%5_XhOnH0t5Vh(kCUmqlu@.9#Ts#@MA!NcXfk!b+*etj37o"j>">L[iY-Eh=0k[,e[7q8"XV2-KD)obI/jEo!(T&Yl,8o%Ca?768UQ<Ec[*knW'ONO?qBgkbDehaTcr7#qJ"tmn^R=+fa*@))-"#iFW5<Oe$k+"_o/'.^O?HHKUDP0/=sB_j+rH4pro;A;^G]q%+8M>:d-G^TcA.1$k-!nGb.`^S_qYP>M,0.]k\e`RofR;^`%=p:PQlU!0%Qd7IHYRaN.g&#meTk&[OB)dBC:q'hm+7D)&np#;]1B7%rLU(PiRm]P2HJ.9Z`I_fV&Q;?3]D(3:\-8=/4M:@L9dC0/dn*(gZe<s?uJq?e?7#]82k5KDiCd9%)_-KNpQ6."d36!]oebV5TaU_%-OSY*QMSJLl"b3$dHPFI6.b:)%+EaaUHb,(c=j/7ECN<$$ngr,1EVD-I,Y"?H2f"?pWKf.V!$8(Xfu*!d`siC3TkI;O`qqUPKpdm%g3B72/o#4\`7eUjGVlZ`k)*VuXee\Tm'd%*A#3l8b!6kOW%!l!NM1mh8jqe0l9[N]j5,,WMkL>lD*FE0!3eYJ1ds"d`#.d_XD_(9%B;Sok`hQ+E;r`5@n>_U.OWel9[pOl7V`#Hn^TdBK+ZG-7L3d_d*pU,$g)2?3;nZ\kF%,W'ZO/(XLMo/rR`aQ,OF\#^qOR,Mm^:E*%:GhsHcU)18^rn\)7QVeq0ANBn6tG//rEcuQi8*Z1?FYo*5*#OlHL)#`_nM?of_.mc.;pd5S3(6&9?R%H>o)>mkV(^[hg:?sEOVP$%KtFFqRU_FOVWX]N-"OuMCCG4O-oQ7<+W!&0k(%?;QrmR\]Z]:i82X[:;iK0B1*8;WQIGT".rJufD\i/gTq*n`em^-9JPHe]XFE=R%pVNaP0m,9NU<hp1S_r:N&3[cZ=$O>,^Pof7]D6/E$6Mo7@nK#JD(@b\V&Kr/.?3T8OCik+\pPCMe`PKuR-hfg/]/Du\(q:n.l#Fm%a<[X5Igjd7YEBdp@#?*;.2o6@i2uoS`NW<HmSOBc`P@"fDJdO,T3Z)SmP/\<7K41gSe>sVkk!S>N':8lp+_I\?VL\u=oC%?4ias0%N8Df<ZjtOu^G4s26MPE6d;rR_Oh>"_(SCAj+YbeGNjks+8@aAohnRl;q0"d$5F#h]/[\b$H@]#e5&E:24($1_T6@s:[PkVgm8"gE%L!k/7^/Wfm3Q*VsMl%+MKj&_Gd^p3=L[DBM]8=jhHTuN1B25`#,*_tK[X&i;V,0A2ik,)OUa/(gBqb$FU(Q!kY(-g_aglogan!>A%@]*E*e+Qp2VtQ@I,:6JVS0dkbV:3+h0@4G**OaM;G.5pcC0Ic*#WBF[*PG+erL9<M9MK<9rR@$pn.sorHO\g?(/;\>H!Sb/^.HNG%H]:`Y<*<qs`huUPF/;WENiGkc8Y&o2P46c2KXbSM%I`?%?:(RXId$==BW#K+CJ&7!EWGTUQdSsq9#d*BQ`6MNm3nK3R9Xe3PflWQ%H"=rDSSI2NheG;m5Ge452rgXTe&!FJHZ,64SS=&K'skhTQp_HVErOCW+bpalhhOK,'FL%oD&(K@7sUNaAuB!@>MuC05+\S!ffgQm%)4$;!Z(%<#6E="idc(A0L<3'R(STMT9hBO@@+JU5E=O\;lfLI[K.6Cb-dCEhKBi3r8`GiKV[8`7f0<"\gQ7"a>1$D-2L.EuQ;3fQ%'cT=&l?]FtW65\CB$-1j+ce9DH*8ss`aq<P$Y+!3@f@_2E1"HArinP>;]_=[[o**65Bb/P26)-7ei^j4Fh`:*a5U7YQ2\&9&X,4^%XKU0+NJ6hYbBV-)QWlq27d`YhRPe<;4A)5e<Xs0uhSs%M8"@E;[fL,$oe*/^bQZ5)E4fb6<s:6#9>9aBK?LF0/%a-Md*3,q!.qo`%[k@=#7sl9O@4t&/%[KZJFs?cRbaU&L;ZVBDhfCJJN`Ej(plIEm@7]H"XX;nGO?jfr%OpE*ljemEYlRc(_u)\k.VFpAo]#O$"u<C>%eT-/_,(!hA3Bpf[T=qM^Zh<s1-+qA'NV._t2uC,WEFLKpOf]c\QMehM&/[2:)s^'3:=]nd%U`DQ%%7?eYbcYd!7U?Z8Shko(\K!'%l[W,g=`XQhk9&-ES2CO*7CUL&"dh.P0[hOa#rp'+U0^HpBSJ(RX>tf6Z>>]1!41ij-)+nRCLC%]!!fflP>:#`Er`fi6Tp>Id@NgU%PV;u([W+IQ2jbD!fLPaXZ._IkTS@lZ0BP^3^[NXY4<GO:UO9V$r,=3Jnr_LY0AufZ8,8<Tb8TQ=I#7;nNpnH(A4T5Q\+$A10I#R5%;eiO_f?YO+goGlkh$k+jY29eqE'q;(Q[ggdWo#f(L;J057ZY"&nuc?W32Nmml^.UN?fntoqRl-\okp_UhY$Kh&QA.Q)Y%+JoT2Mc%jqu.NId%2d>QiG.n+oJN)h-<jeu(@C]70#79Y(-4h+[;6V,&[E(sfgCj*1U#s1<aE'9Z70jELQ%_Hkltk+f]WQQC,^T9D6FqGAs=%Umlabf0&Y07Xs#C0"9*_FX(IoomM]ClO?frht9W$Fd8g\lFVKPg[VKD%K7F+(inJgIb-7O<PMDfj3)nEP+4<`fXlU3@:5=^3f\F_%jFKq?X+#U>hGMa#;I9#(`EeGlY$^HkjC7\k%/-i2N,,+)hNd,Gf.[)&^[Yj2Q.+nY'fb4ml!;'rK<CeNd37E?97PK1K_P6GGU,99%4hd%sn`[^P2jX45qC;"QZ8m6goui`s&0#IJd^sr_Gn5HV70C5^oWDOTB"@Y9^EKr3#)pkN8fkm^I];MT-.r*)H.O_*N#q%C^>[u7%%_]nAL2@e-Wo%danI95+a5,V!ql\gA:[plCMVb9f_Rk9]YPP)+4q@4fhoL0re%:(nC5u)"UV5t0)-=bV*p2%N\9In+nF[7\Y$Y'W%)/jH7po[u=S<<?Sl^-H8q36o'II%'u4=.Z*2o+86d;9_Hf?_dEMOSjr#C`n$rSl=WTG/?k]70"C`-4YjnZH48A$Om\hL"4ej?3+L%lSk3gEnGU7dM!s;DOqglkNTF?ri4j@d=Wn:qP>]s!BrEi]70"%@F%O)ORN#lTMiMhQZOu<kdu<.-T8NPGi&*dNsC]iXrZM-^I4#X%VEk0fUhiijV'"WKZYP>Gf.UDh7'ek.IFg,Y3#n>T&e<l,Nm*_2ZWp&5`0=N=`jGKG&om:#$?;u2=Te-1Bo>iTQLD_#=ZI/Lp2dE'%QPVC=mXlXH-D480gn:u8Cl)UbfYlRir7f0\b3UkE=F&Aqcr%F*'()fXKu_ctb&Up5`qXptD-?RAqrqLbnQ)(6YI`T-`m+/-abbYq%r5;Y3HtDmFLV5`snTelIn5@"\R]Sb2QgK^+5I\q]_pRN,bKl5F\\_eJ_Xfs?g])>;Tf3L3>s+Z@f.QeuNo.!WpZCXVDbH#[^TXcs%-a0G+ms[,1^M\3uKo<Lp<m-l%Qu#_@.g9edl.u9hU\h)\Dt/'irQk-%OnMVMn$H7;X/?U=htLM2'4Uj7[eT:IgsjL#`k#4MoXV'j%9f5+LHRBo->-6tIjjr28qJ:M%l/NdZHpVFKY5d0\>]W-di0$c1g7,NtjkR;uNut7+Q'5rjR=_#:\Ls+R]&)lAHnB7WQ.NIqmenLU%q&R<)m6Be(aK"Le`REr@T@RW1r]'HDj5D3,1foL(leBbFoYO;\bNZD2Y-qUq^"E39qt&fTc1GV.mDWs`-nNiVh.>b_ju8C@@_"X)%5$4Ci4b$hT"O;'"/LRZ^/]PE@f<0Q<C*DIaWY<h<]'W;<QTd\tCcJc%1C[d\Ibt'F[CO^gfZ=lNhSej.Z8_Gs](t[?gSLFpXo#Gs%8#jr0&PZ/>?SCj<Su.i1fCqJTiGWdq4%k::o%a5\J\M"komQ)8ZD-Bje9C@grcm/>(\B,5g\lmRD5Hf9)9)J0#"'qOD31#uN>H*b%EjA6\.^hMu96QE*@[Zi[-Qm32!Iq7)d\!b)ci:eQS'1`mpNC[.`taTup[<TtDs)$K[9l-V+#i't9se<`LV\NoC%\+S%h$2aV8?O4%_c$!AV>`_%aEg!##!Y8RrT_t]![!`+&"_:+O7P2,IICjTdY07W$LdpAhKM2W%lWpV\Z-fp77m[JUP?<OYPPt]ADh5jbCIBb2f7Yu%F(+CBER`i+r;?AVCd3H8QOk_VJACG.XWR+8QT,RkI4$TpFL$LZ)_Q[mq(iJ0?KtJpGj/uKrk'sdN\=]IW;UFMEII-N'Rg57H`$S<%X]ur"G<>c&HMQeXY1m<MG?-3^B6&^Va85.6q>IJl]?Ba,Ulr+ZjX_h&j#e:?aFdpP99Eg2NA=9NXBDr<W7gtWm[<8+PrE?VT6:\c%eg@18\Gi4hGK$hFZPUH#&bEEb.7rUP'sigO$M;d:j?C(8+UVKVoK#7_GF'gjm(mUI2#Zk+?ljd/d9.c&\bdQ$]`ZZt\_L0nqE6B5%j&gkq=Hu*g1oE5[3]]&1oC"o4-sEc#5Z<<K5I%jIISMH+b<I>>lXq"I90;<`'8na>W*AJ!@c>X4$TG=8)%I34/H!X!msRcha)sCp%PNi3fnCb4-"e%F=Qh"@?G!+3?-?oCNh$S)KC?63gk5@<7BiOKi@]0/.mL$.+&j+8qMm1mdQIJ7f09ZeL=K.*;rtgt!"@(DLS5sn]%?;n3@1drNX&W/-HQ$%-X2S_36.s#d4ErFQjBc;'2gN!H$h5!b&-eZjm\_(3dmhg!=Z<`s$Qh@1e8_a(1^7diT'>7W2#CF./eb7Q0%FPt^8bR^)(K=WG0-)f&k18WTkL%*"%<`G:H.S14VKUu"H>eAX:5S"0XkdC;L,"$tAr?5B+<*YYOh3kub,oC7P+0,Tp(8;8Nh4=NG%)=G5\bkd0aYMqo7C_:Jmm2Bp+4n#%MEuE+J7tNV%:T4ZRJCQ&<)__b>\,j6D6*r;^WTFsP>i'\dgK?92]'UVoc2k+se<$Qj-*6ZM%6,HqT(NKDT`SIRJqm]Z;52MFAM#(9.YNihu?eG:h:a(+EC&egCFkZ&-V0E5hcI/5qiaA[4dERjSJI9^KI=PY\eLj)G5UZ*NFZ@ct%:9=o=p&%ZmD"+BWZr'F97Eh4P?[ZM.J)"/Fol78V:MA3Z9Y/)m1U)2G*I1M.WCo'D$TBZtNp\!IH.)QPC0M..RS^R:?MgDF4F/4+%S!$Ad@&,/p;2q"iZ5PZFWtn#T-8#GY`h'aQO_'@*GVI=E!HSq6n]ZK03nVCLa`5a$U.Vc+&/bT+&<\f+BG:$fi4rh.G^="T90:W[%OC^&bTp"f0/CS!"Y.'8V&_[bi4H-O`d?65oNGHq6]iO!u:Z=#>JT>:&-B9h(,j0Q<e+Ru<m^c]SUUSUS_WtS)dOk:.bMZ!;[IB'<%+Peu]V/-p*,_G]CP5\5!X7GY[dOe6\]22u/U']!.,Dr(n5>j(YR4M6Q<rKD9iX5X@;L2+;p:H1o#lF3k5gTGGZdAY>q<.%u1'qX5%/]#r':&MS-m7;@+7'J<uKBgmr1[ff!c<u';1%:kl?!=!6Lp?X$E^9J=J%aW6FUhIM&'"7Ra"?s-,)l%A+csT*/D0Q#$$;QMVf(D]%l(EhPI0$dl2mQ*=6$W;37==Q/Vpd)CJ)_NZl<2KR\9hIK`cSZ-!pY6g=ma?J:hn(7e*iXT:qiI%YblobEI\F?VTV#5Qdi)Kd)Pfu%>6WTkk*JeIK29ZV?$0ZK*VT%6,9]9ocF7T.a+^YEqd2iTLBeJ/r]+6XOn2KG82os!G$E2ZQet`JO[aDGd@*3[>3e)YD08UOX*`a=%\rU&3Dq!%E?QW%j*r:QCJkAf<']7esCs$n2raBnKFu+Z%SIMK4@sqZ1</R6QdL,ua+r*Z71UMT)I3*me]3[J_1TAn6r6=0WPaf`4%;DF31`H&_P>;;/:`OK:SJmo]sM^_SLr/.b_(B;/83QH-H]PG)r;)jSu?TEV:<EgiQkJub3IOY"D\$C.Ll^.:"7_)O$I]ECFZdZF6%H`bj\q:5Dcej\i]^pS?cpPjrCSno,,VpjbX$ZZMNSMlWnG"eJh^V%7HrMfCrb0D[-H9LQ>RlC&md%39'HODC)pCi7\IQ4V)o_S^i%/@52j.Xf6,b^5,(dtOclC2<]`GObIlF(ApG5&Sp=G5poV/R/+fX7i[G_Tp0\e'7U4O5e#:gtZ"`5OXq19nJ8#V24"b@,DE.4)Pq6%'8pLe]+^+s`=MLIA(N?X.%bnOKI8d090W1"M-n6t47^L[:9Z@#9g8@pkV\35nd5?ohrcpr#&Tl_B2Fp,[F`+,[Vq(VH]*:!"!$j7%H&I&W;93f4AoEh#/&K""\%G/D:aFfc06rJ'TnnhEJ'2'W$Usb_ruH$?^Z+)$=8mf\aS-G2HCR.Yo+q/9U/9Y5R(Yr&YK4ImB)LL0%hcBprl<j,uq'IKD_10L0jSOh!fC3^'MgSl/jJMs^HAh\uk6c^b>84L0s,OS0++s3lrY9?K:fdQYDc(*WkXaPST*tfcYd&P5r"27K%J'D3YqhhuZfDYqldJqb:s0"?[J$nh*[IJ*`a^j<4/&>VMF%+GkGm@@s5L=R[<(12a!PK1E;+3eMXc6[h]#r#O%538VO,hN0%XtK:%iD4*;@jW[h(T,t^X)id?DVA?mgSo2%I0IUbWl;<ESiW$=^t-+h\;U+5O3MTKm<PQJ)d^sZAtRG0FuUQPN:8m<fai^D%SK<M\Dn*F%a6QA_S8(!+!q/fdGHUX45@:i?OGDCh0oj1L.'7\4K.2[Uh;?sl7!7Hj3DnN1ms=CBm.(6a^YQ"V"<Bb<63/2Fe]qA4$Wsmme]6kL%;<=Eb/#VS+IiA4qIl^nB(N*P](AqSao]RndG>rjh[ds9BrhuD=gobJ$3]k[^S``JUdeY?+MP)WC8!aHBq:.To]nNc\noHK'm1r=3%Vg7nqh80G9F'=##rr;*;d.p]UIQPYcZN$8]-H?2Fs+*Bu^b<G'o^BG\5L//6fCBGSofQjm[qOEcSi8L$BKF#P^B2V.HA3/b*<fif%/%V0Z'26r9KDBY>jkb"cD`HN!%!<q1fV3'6Y!r"G@2mjsjV85'2ZRG+*Q*M:/>m/b#.?.AVWeG>(mYL$FJn>3iVOV3FON+@5NpaM%C:78eFD0.M[%]!3W90I9+\\@J!rg)PNa$T7h'/4=FQg\$MF,db\>C'J+eSkf/m?-.QE6gXH.8Am1UScl]$ieM5'hP&0hl=HLLIb(%6X1:[!lNMMPPXl=;);LLSulG]-C!(igkJt=1opo!oGh-J"TC8mQl9A]AseM/Z)sb`!N';*79uhe7ZgirPl]KeAt6=V9U_)T^c2>=%:uAWo:,$L8fX4sd-O[3>'fDF45]#2<BU2bDMiNMK?nF2?a)>`ICd]C>8AiFVgF-6cKBqX96p.P__dk?fU^gnPdDCQQf<]/gVJ#D`%Gc"n)7+5l(YSI^VSR=e94M[p#_aWVl5_+U-!"be5`j.4M:0<5s2m@F,$eKQpPRDR&L`0YtRKhTX<m_\O9rmP^2Uuk;&a7@_U=F?(%Pmc&^),I,d8F4/>id'Jq.@Z,3n`U=@Q:cD)913V24kFk&D*5]:gd6(:K4m''IU%IiP:k+tEt"PbXi"$R*fX#e*b*cJ;4+TU_?7A(%-+O"M\cgC]V_eo'2CZjWGXg*RE0?ekZulU7et<`U!YEtY9a$/ePORtMY_G2d'L5YNp?,S_!]U5u\H_/PWaRtLZmM(H%:F[=HDF#D%^r?:XQjjH\Dj[cU#3+Bg.;4H)&BD4mIQ$OV(RGkE]IH1c5h=_RXl8bqn/8$;?+1iAV8XAmko08cV:u,/?"+lW#OW37D&9ZG5Rbgo%):PhQ#h-:t9oioSH9.>nHIQ5l\LDLfJ2IAlGs$.8c2`=D&3g@AfX,XP]V9:g3!3P#L;u)_U]A?\25Y1p=kkn8ZWponQa(5daN9N#%J;S1_Ik_'^)dFQE$'+&ok-AekVh`HNlN(5<'=>&'n/^KYb.9KJ>_#t]F(tRn!HZ9[%)b<WNG!P4??AfV2B8*n@IgS*Fc@dfp+J#3%T`KHkf;<E2HQ;Nk$D_?;9A!)GE>6T9).0U^Cr&23fXMhrb->p3iEeBIL3TSP3uZ-(3iX6b]8g)%V[F'l_>[i.RdG-FbXqjZbjP>;%*`=?#J/?rc(G),%"3fN>V8G%mM@O<(df?rQ,aqsG(Jb:Hi8Ns24U9RR3!`Fgn5,,,JfN7$j2A>`(o@tS!CRKs7kC%WT*6Fa@#1TB%7"7+4?6gU52RmAi3,K&B(6$E*4KN0gHI**CT+9:$NucT.V#[5-N%'_l$L5Hh(rIDP@NHmJ4N"Bp*0ZBK'`-EhMH!4nc3G2Jg`Jd(%,OI)h!Q$T/92'@+@6k&.cZ3PJf\Zlj%E.4%+f9O8\=1MNcUF]<&4a(Ve6Eq)%P[#F!3lrlLLaLJ:X'P6%fg:g<Pla#"q:jI9hu8J%@bngd?:eY41gWl8%U>&T]E[3%%bGbaM]j4k>oJ:V8dK6#=,mshP!LeJ6gdN=+B[8u]&q(rHW%@76Ic2:`g1/NdrT3eM<8J'>p*[B%G#6,`F\hR%>;qsr>S,Cab-i9B7A:d&\WTpC:)'ao9u/K;a43#ki47LIX9c(e8N9Cs>S"8*Q3(U,VX2So_?:-C!HN1<&YS)6Yo:j8%dhjEJ<)`i!b_HG]i9hkH/&r+AKWFCk%POD^8TsBe]]L>G\=.1Fo`.C_!NHgMAf.aOQP9j?(l/l:+p\dtQ.o:E:Y%<rW>=]h_t>i^%aFU*%K@NZV(GK-^Om:6A*(Bs#!lKS+U[&>>(0uLtf3jDEEc8O"nVASdPD+*MF"Eg]!h5>"6u8+Rkp-XVj>QOC>n'')<eLH*R$qiN%eGohR6;'(A)`VOQ+f6UL$Y8]<7$oSWZ3I%glNrW:@\?8VToMr"KnA/*JE?'TPX'/IAi!+?\6g7DYs)AI;1P%2`=Q7XEX4ABf!q<0%$7"*m*/PC<Bb_dBK&et4J$,mm&h>$4Xue7G`R&;CTl&6<&7SbI4'37k;OGLV&+jEVGr?!;KP6B6MU8mq'BQ(GqBg)pJ1s(%jYU+o%F\GtGA8mj9`AR]?7Am*bkN.E'<Gs!6%;ZTV+XXFb"i!+2m5u($!8o:lB-:2[<\$S"mr3ItBuO@Qf<lq:9140[P-?2733;Jl<g_?Y%guT$)QW.lSV%\R9daHL<P)&^HajQ;al8mNQ%@sE;gsA@+`aK/:Vk1!1XA2.AJ6K,YPi]K>H9@63^e>RHp(oB6,IKkn<0kFu"B-<t%?kJC90:K*joe<S'rbTK:qck?aZV_6rm"gJJOg5ArN\5[bKIoKs&!0(,`bM7iNt=,SBb>11Pr9r3EZBVtE[fi<R!*RQ@gK:f?=-cD%60TM%Q!D9^YoD'&_!3X#$3UB_.tf/U_.s&IWMT4K1e^P#cD9a"b/)VM\a;t@6Od!nbT=AbI17<L&Y0`%QjQ)Pa,i]e1D9j-ZYs;^%.">J9os,:<B[gp*aZr*R3)\c?qo4_"dCDJ3NJ^gi'EMgegWm0*/W\RE)X8*'To!88,id6`e)bgZQWLskc-5,F>s\j"-nJFbhpIOQ%;#bYXNO:4/WG8*s1WU_6ho/meYUTu"aj.5,Ke%rjQ_b32QS(iOka-BaJ925s$_7?4+_aiWff!ai(Nh?i2.daeiJi&pJ\0d^pZgV2%PY4s(77A(q%ZD1O!ach"gCHRkoaCiFA"/MOcTi)c[ZmHp,Lac9"th.A%:Z"4LCdj;$ul^*ZNVnd.1Km>3Fj2j`l,!2ok6>gY)gL"%'Z]>[*m6>V!#$h!0fjR\E)h#a5[&>.<6?D"FT;Od)5O%UkN\5^+G?$g`M1?&OcW0c^rU=[R-AT62UK7Ddn+I%M!_FGkNP<6ZX%D%%!7eqSXbt17oeZbO#r)g'j,iAU!;)ZJAd!7qAXI%%%g$cPBZG*MAg4;j!X*i!jjn(>)Fo>'#]'dR6h[MDL;S?[p*)R1LmGP4*Wl1A%>i]2k+U8,Gh]2I$X`4Xf*Fi?tZ\='H\h7b)`["J*5hL.N+?[g7\nMA.;R(.B>fS16$)J$gdU<Xs9,F.<M(m^4#gcR/93TCr%O;sf%.l^Q/CosJ-"2u#7%@@MBet=$;-68R)''510r^hd*rt$'[8Iun*Ob-)_>SZU?c!W"eiT?fG"ISTgcQr&'&;.S>iT^tBdNg:UAEuT7%*VU'EC_WKG3enurV]%o`*=Z&>@>McC*tHph"p8tj@XoRN!YY%UVZf,Z$Oi8-9Hb=79=AY^$t21$#RLK3W56.?Gd:;+<-(Qid:<52%3Moq""VCF*dJ*b@%T>G=P89@Sjq2/,dkISQ":S^!1SQp^BKU^R78]&K'SP)go;%l[UljRYH=WY6DO=*>\rC&&Jm+4#UVlG5EZ0fS%J=2_][O";JUaW&sP7Z`&ZCYba9[dZdOkK!C89In!EC?Ul$1_0=>.iC-<4N0ndaiB#3r4:.'0jP=7lmM1V*qNreQo.=3G=JKL*Pcb%,DA_p[uU<rX@5l3J2([@#V[%fo70`US4,1geD\%=Cli&[QD?*CTNk4U,!qJ>FPBd]#Ilr5Jk`!Xgm_fH$*'aB?fs_<^IH6sNZ+]^%,_`C&_?<1^6BY&8'EUO&eHqn\L>Epqq.)%`Sp2TbTSDs?J;Drk4.6!iTNJ0jR]_>.`9biNaoJ"j!f3]cJdO)j;E3+2+fH.pEek(p%=tjjA5:n%/'#dBMg=lTPRR.cU<!iVb-\n]O.[+P'Rr[PNlH_0--,,)G?"409W>nucK6<1:cRbIo*>$.u!s%]>YSHm;L"TrAnd)B$%lg@<AO^L@j\e7H?ip8Sf[fGqLAgJSA/9WRI2X6qfcJ%@PYY640&\O'u>>!",q]D/jB`qL3Q[VD&$6Q-9h;LL@72.I!*M!cP&'<@Y%r\a=:$Rom'OTP?MVYXeH-G\9+K>Srb<o?qJ-..r"K5E)3j]T!RP]_']fW6C7^2mug-@'\FU@F(k/!pL&`erYq7k.cBYL9ZWqH*Jg%P"3+.RLWD>D3oB2dh&UsP$*]hTC(Rn`kFROlUJok>Yk)NL9ZLJ+dQN!!6-C/@Ek'K$r\aIk=Yc9/QEEL-q0<+,]5aa[fhkiTl^EA%3Y-$^-3-<&68X48O3IbRJ$f2k?."JJFH"?o+^6&oB+G)CRk)!.H*Aj!8IDh(R,1)^k(=H/WIQ6Z*ik*OFPIdl,)(-C+o4bgq@HjP%oFQ\D%?R1HN7eAT?m9gED*;3@2A_IK43Y)Qf2YGDYXq8PPtZ/G[Vdg23Psd!Un8\&W+2jaTXa'u*Z'FY@fQqRA;I3V[Oq/J")U"n%nnfNbC"$K#%(7B&!j_3N'#B`P1Zd?MR-5@<Pg!.+K11HtPSVETJKSEl!-0)S*baie8c\I:V]3&`r$)s7!2T8NGRSB:;'C6C>b-)'%@8"GWLE=<#:E'*e*(p>i5&gRiBA;3uLIsG07Z@ffCriiW!Z1,3#JrAV230p,Mp*)mOloA>X>Z.[A%`oo%R$+%"tEEcA@e'F.lg7A%@'1BKL#Um!q$9X>p(8>'ZH+/`*+?:YZ(quK@&$<9HDF2j6jMO<P51<&Khdc_pHafAJPI;F0kKSRRoPatCOrcXli=F/1.VBh.EtaQ%'/U*Q@@Vkh;Ab_<L2r+?9+!HPD3:0GA/NQ#+Jp&$SM'I6[*)B(%,!HXB:oe`m2c:S=,8nl!_Js%1Gu=H3c[O'b=7DH<h#fu*Sn`=%Cm)%u!i/,"9NP.nK>EEYM$2h?JrZ[l82(@P\AE>sK+LbWKrffLddKUc@98Vrk??O'lrR8cXBd*b%llZ@.RK#jFusIY!e";l1ML/(%kajpi4d1eo"f"GJL4q_?!?Ak;gQGPNUa-S=kjm9Wp@e8($PW_LB5AM8biC41L/(@"M]`dJ"$a'#)@KY0qkV:>4Ci(p#_3=I`c=V-%fd9oejJXc/bMOGF8d@]*:$m5%N%"Q1eU!3S#'AN;da]8)REn3MWQLsrj6"6GO+Ig_l0)b5[jt+6\3Q*5SZM&AO5k46XeFZ"KaldK%d/iO;Y-CnI&1L_#TR&5-(Iu:ESWJAPo3@#PT#ZTlN\.)akO9?C*\?O1*M;r_+f@\B.3@t]gg+T6bcc],U4l'gm?NE$ILXeG*0Vad%BrG&TKVU8qJC['F@=kXo/;28"JN2h=TIQ>W<fjJ6<rZ$CLb>S"6kNu=R<!Nl?qV@>Pi@l)`ohVX)(7F.M*D@0+Eoie;hGf@huF/k%9o\=oBDX(^OFf>oc;utXK4K10d?RrOlkkR?N?U:i4IoA./K`CKW=mjT`&L=(3kOuS=,"DC4@K:,8_PN,\r19d4p2EuF6+:%,:(4Y%\q`2,o9-,5e"B&;j?dZ[7j^^3`Ifs>no3M)'GtDn.S.ZJ<tq:V1$4^mOK+^29'K*j^#mGYaap3:D+b01;Xk=Hj*!\LW8JPT1TD@a%T*"&nXb&>`q1+Za,5\V[KilcY7>H+Gf5QO0H=k-;oq[=maohJU?GeI\I$-H"g0[C73kA/XW)dPCTUaqb#"iJDR[GGWn6?b%:g@dY%GRLRkS<.>9%n.MYRUE#Dm2j/sCa\+%800f!8/)AD_Llrn5u&Ii@Ng\h+@N_LRaQj#4:$sC5ncR`pp8&>06A'^K;\QVQ-m<fR?<(r%_]-K**3B;sYg=4?]$5r]"MrFn6O!XG8#aL'edK#(:nN(D_]1j*m1Kd:6K?O.Qkm">4ORg==f0(Z@G/<A3ZWX1r?WGo=uN]jgG%1:%2j'CY4fQ9c62K=2hE`WK&[\S>9#ij&4.)5,02nHkH^;Vq[gb]fT4@IH5oQbeArBp?BE[nQ4W0W<K]Y#h-XRRf`6>QMbm9M7L0Oa]%LUjoBeWHFHo"\\_444StU<Dti@-m.^R-i9=\\Z+8'O-3;*!)iD+;M6&D&[6%T`U&j#1af*P2,q^e8=2j.IU[aLeEnh,?YtV![*V&%!$LemQU=O#.[DeB>fgLSOs4BaDT'pJM307B1GLamLQ;Cg`ZgeJbJ"09Pr4T\!W/E2m'Xc6*'VG/NlpN#(hmZngm5)N<^eR"C=LWi%k\sL^.<u&e#B2iXiRN$@#KHktP&8PH&h\^XN\TJTY/IK\P_-Vt\L+K>8eO)DPf&\`;eDQcj?`4ZR,g2\2L6!?Y#IcEPF>+mEP(`k%VEB`)OJ^2$*f@j4%Om@6,]5kr5?C8TEF:0Z.^#kM]56N59>FRONsKad7`=.o1nuKs65BiM7OP:bH1>EB0=Nq7ai:2a=_/kf.)9(2%@sT\H';,eO8dRoN1(Fq=!6IQ\-B2c(4H?l@>b_)5_-SPX1fgQr\]+H4>opR>/0m\mb!ES,_(?8^_GSIN=_rs?]270\_*FUMC8Pk<%\APXOTkP3.6`tf!]leSRNjQ2&Cs\lSA`TD870>uQ`\=4s)KaQu&^6NV,)44;f*mjki%Z6K-,Wj/)g8Hg7LhZ#B'4.cApbF!NAeA&%kK71hipk'i4F[GS!rRoLrXh4NFH'_m!Fh-\Pc&5s'1`s/]kJB((.Wa'VctYE=jZYC;n@H8NHK/od7HNFJKDU1ce)pD[LCt;R+i&m%#%>AKa[%M`N3\OQkVQn=mQ!BDc#l_a1G,2QL]3&RhC_.TiL+^)\/4r<?/q;1/k;hb1h8GRC,+c/;5:!_a329%5i\*fTc1I(nMh9F%7?'YB.J=0;@pM,,!L:VLQPi'PbRiGFE?TH5bFFDJ4U);KMP$%2<5YPBJ8V*HUuA;\JMNG52@`+&0Re_2+P=\&(q\T1+rG1*,rmHB%#$f.\,fXfeSmc\E7.Wo27G?c?*]P$tKQUdj6$2F-g7$;@6*Uh(+X8'P%[i\F3jZAUM&%P$hpO?AquiV[amfI%l&9@Q`dVq6KID0&%=AXthW-]Kr?jih;8eE`tma("A'LNpk!/*eHL0cFKUCj0Aj`0>ADQXSqAdkE#P*?H0#XdV.-32)h@pm&(A4n90&!)!l%P8eR6SR&`%6su*L2C?]ZK1BYZoB7`&P?pg"<>.]a?k'i*r.n-QBTbEB%#NCpRI\.kIM`q'-"NV`7GUdBMoOdB[t):,lf?Hr&I`ImRn/fR4"3Ri%Q4kKkXo(CgO1Buo6NJ`6*edEBi:U/698?t'/<8%aXKkHmU"qtUWC]`b;_BQ<KPkioYId%bNAAEYGKUT7>`NU+d.uirR'"IAHk":3%fqmJ`QJ.>.q(4s#jO/XZ_d1^$EJY:D#oUh",\e<Vh8!D*gl5>n#6:;g2WKZ)'5:Z\BG*8Bjs@f>H61J.EKhoZ/Tfa4Mdb<l#Biu:%)>@h/JciQV]^1g@p*hO(QLQ'MJ]fc1*#W1q;Apb_O&iE^:K\?s_r`P/R4teeQs`-'6>Qr_>tQ>\e<\(+GaEF1W:1meI@W?H[!N3K%/t4FY*f$k,r%n[DmZJeuE14kU&E(Zt5)l:IHUq<P3esQl6%mDg$)O#&*-1+$\h3GCoM+KWR#f(.Pi4^,4EJKmkf=0J;AbpXOTH$E%UC;hh9n9bZqBhW@>IIL%0bT;*>&_#G)&gFFg!V*4gJ?jqd&0A33Qu<##f^H_79'X#Z5h>U"(bePiHbf7```t>@1J"1'hQl`:m$iJ%A0Ac0\OPEI)cCusOp:!p%5'+/btWQ/LhO2A!7Jo5++nj%L))2GUh+Q8cRUZX3i^%!*[YtiWPl,0FK=sHFd!=[8MRAF;]^W.iAhV;%LR.!F"MjP1\=[V%@\Q61'%O:A4=p&V_2Xp6k='#nNF=U1>oma$O,b3HB%"?>W?P-+=E2A9B_&r@#CB7L+tN!sBC<i(K^3R"3V&38%=]k!A.IeK4`.rh/T#0HLnN"&9k-&Gt*!i4\o626)1Fn,]Jd9;PE*/<W,aP,PH?A'ogi2ni/mYYNPV_As<#i'.-"/-=6J\;'iVoXl%-=f#eV6h(m(t`M4l$7W=;d1<H@3QR&"J8EP-Ml1*:S<5F*D`,/>@LF\#_OJl4HoN(aaZBS(m3oNJ41>;1b,'m1YJ[2j/aXi69lA6%a8gkqiM\gpG-DB.X3#!D-)sI-)1l,8bma=FP(A-g6m@PeKDN)h8XLJZbhmD63=ONu4=GhWo+3#qY/hc[#dJ'H==if`'V7d([5^o]%dOt>SFA/lJSK4\_`"1Ef-W!N7%V)+5>q@jAm#rW'C"<!kR689D7$G7p3ei9%<d0$3>`ReQJt*/e_\bmU9;)6a8PqM^#"^k7$f1??%;=U&-%b5PN\VG:c1(8>]iX$_<,n/fr)+GelZ)Fr$5^UM:$U?*/QHCOA#Xsq"#M!BK$@q:l/Q3S1'RF#BTiYc>$Z@T:A>"tF$!5NZ%TX-u/U[T82m4%$9r>65*A77a2a/?`>_aUr#nt;3=&futX1kl=S<R^-;@J#PQ29L"59N/eZa]@&#7gQ@2A1GId%oHG<RC^F/U?(e(%/LP6M7&)3-UllSY"n3d0O;;tnnX1`+!IOYOe)UZY_h<VdA<2HRX3b,^2Wl+=fL!Hr]kO0cA9(D%+@Z>e>\r/<A5fSliVAE_[iq@o%UY[C]fs\l6)MbUn/<u?R:/Y";g6n716CHD8R4:TmkL:uU9hXZXafU/J8Rbmp)u#q*bEFGPM(aM_$EV$XFBFDkZ5nsJ;F^i1dW?B,%jO/<./qS,PHK5Z,#ao9aE9p[V*/8Q;;07;iQQVDe3AInaauk^ail"[T.]$MtjqmBY-[0-'-9=%[#Q8\ACG?@YoH-K0A[3/=&UKhM%U3HrT^EGudT-+N;%?4+m:%CAkP`'N-\t/:1Wq<dI!?Wct(:uYBBjOq8U^RYo,@E#)j7?!*HI,edYVCGm*>5l>r)lh2;_$aJ-&sTF%-nNtK=r^%M'$OsM_^BaEk!43dGV1I%3-E8>lfrM"3Z]=Z]WNm-/0[AAC0YdCV"8RhKB*Rb7oL<VXgC3iigkX1kHeNJ1ME0T*'#%[%PEO;^1jKL"#H+qFo(\6*pio@5-eVra*bnn-],WgZK9G/sN%<`'Ulf^]dhI3-bZpAH,u^C^dD7L0B5)`e9SP8X2*!.M1VB-n(n*Qu%U;L$.kR$\+?mOdrjX>5.R)'g]/Zt$l75?]rgY*Et,tDO%QGHN$?SF^.*J#bi(nVL\K"G1,'17uCnnI%1rG?jdPj@lGShC8O!p=,o%.R5O3E\g@'abI%]gdqI?HNn$)#G'O;$(VeY=2i-'Rl7'F6[Xfe4BuGQE_6>'YBd"pjrL</oJ_*O!G<&(5oiDiTg$eRW,c'^PNXdG%eWO)_nh:sC^`fY4##D,T>8.3l&5D>=R_#1,@`+I`[kUrh$?M2M^VfYD+pdEL?uuh!HOt!l%cZWlFP7DHD\/6F6g-4d;Zn(OI'R4=%j1t7R2XpM"J-$]]^8O^*KV7aH\^C^OTduXG&]HmP2JE,Y*#<FdH,V:CR5.a34`Y4^U'$FNVe'2FT_fW]``dG"C&9\.!uUh?V'j9X%Z+><T_;69bblo,1=l]a+ac\pqAMKBU"9BS@:tRFq]+bV7EgEbB?HDaE(Jg>6`mK=RiRE8C;K/LeM\0eQVk]`iN1)*.L?5C21Xl[]%;kfnJ=Y[5_NADnV;^X2K$B/Cal4b45i_"\16>UP`eTD(`6t1CcU']Mamc[o3mPBrr"k*+K-'K@oLhqr7_[pmA4h9XbZ8bZ&O.pDE%CT4['3d*k,**sb=;-0q]:A<<WVOL9'kVaaIOWr_;EioaC%\WTHc6F+qoFW>+8Z<hVX3:0PN&-gG<JhPIn7E28Q]>$?aMO<kc#K"i%Q,4\a,3ZXOk:.L$A+BoYNtdDf&cUj$+D33MDCA;s;*Ar3/Wuo/#Ae[g.6Mbt8@P!90D_nUks4,QSSKJ/'%nF]&dLFp5XHmZ%9kce%L$WgI5NXU)7G=>.V(bSr/8KA8M\)?YbYGF/iB"7f\JToCOQAG^o`\-m1gNh2dkd*UHb(30C[&FCjhp/QEpP",DF32'XQRa\5r@X'%m"o?O;s%TZ>.__BBL7<!q>LfaM&ut.@P*Ko!d_qgX0a%uFH>TrGk)CH=bp_3\_9/Pp<=P.@gN)@3&7J1a)g1f2hPDZ=$1WNr/e:2%,d07j?'5@gM\u_9%&o?I0r!k%4V>'[?9&e;1H@81-H`YDU5$_+_oIC/nphn%ZIpI?a95.'?A!<`oC#2B2)G'L`K]O!L*:aDp?80^%5m[9Hn:984%9\a%DscI70+PO:/X;?*aLH7Oitbn>dlhhUc7W>=PkjNb5D$O-LQ;(I81k5tKDiLSn5tm`bj`"pGToKZNIggM+O``A%0f2)b;qWgK`^-N+!41dP'J*Q"1p%cfSjAB\4AjU>2++s=nYFNq-kHUV@T\!m#GHu0TFIBS:J*H(p;IpcMcN%=ibKO47tkt^p;e$g%dDEt%nOYAdT9*W;i,f>H.33pU.a&/D(?k;o]M43"ImC\@@fYbS>`BuZn7!TZOc@geSjCarJn`AlALL$?=,NdFnHbBiG4Bh&P=X&R%`M!dcG7Bc)G2i+6f991RHPfE/[\Ptl]',i0N^kndbt3Z7E@.lZLd[rY#SSh'.g_)h!sgu0&;'0c*S>\f)V#K>[q4:[d7'EO@B:[u%KJU+>WU;,)-_&#^\Ll+g1SfoID:.l'OU+i<KnB^bABWJKP2142D9)i/SQ.XQHC^hsCiu>oZ/cbXAeD#;c"!e"/iaf)_\"U7P8%^5%Y;J'qRa=Jf(u;Z2==Pqbe#<aWVSQ`A^$!I_'Z,k$+Nr<NEtCBp-Q&[Y)5udD&`],V-EVm;Nh74s9#-t7-*JKK/O9.,"pQPkgm]WI%L/:d&_uRbW+cQ$6aQ2Kl3VnfsBGguFj("*9TkRd`%f<RqO!t2'A">>L)6O6b]9aBPNm>!T'?5SN(m:V8Rfb-Weeq9p-3OUB:h*&(%S>XO2=TEM67Nd"?[8OTK?@a:EWJmauVC71f5^87k@oM#*4!!l?*ANBWP?4+Qk`=eQ$475eBh0gfM^ZOOA&db>+@BIjoucNf[U^45%h7\@?s-/L9F/KFA2"FmXC[r\)F.rZ&1Ir1V]^lFd7UAZH'Z>fLnd-LW)7E-^,=,![8A5ar^ScT-6^\)pIr:B\N`kPN5?rH&fcR8r%!7<XF&A\?#o=a`_Nkr!R8.`Y#I;g#-7G6uh?I4FDNn:`d9iItl5q!,YOI8ETM/SR;$b;!B;c@OR;Bp2.<>'D%Ju`i=DhkRY!@Yh[%Q7VZ(fNcaqj&gu]2$g_W_GKnj#@\Mls#NPRE]19Y4nB'XE&^-jQgBi1k:#@]8FiK[9.]2g9O35ogFrl$Y0&F<?H5s(0+$R%0j/^p%/0pS8(#FR?bB;9s8Tmr2\]97%,eD@c"O5<4'.CEdRP.EJ6L+\A$(i%plGbM/B!B/5\C,uJ2)b79&_#j_X$]6>KOSg;=p\0NTW!$V%[1"ff%Lf.4-o023X2onr8ht?2Via7ie@s,IicB'lkdH.XZmMpi4bgl;_BlqV_9a'(FL?rF5DAtR/dG/oES?*0hCI`6&n^EDdA/nh%=\'987(:*s[Od(#?0S41D;8U\!lL%CT,AW'=X0;&(I4Z6VGM0A$G^0]NGcNtLe[VH^qu17[RBfPb^ad9b>]WYSgAS/q;`@s'9[Zq%_eM7[NB%4/$mqMr&B&&fN;UqbI79J^iB;,q)bdDl75:SG;dtbqW+du@0eJHh">NSFrFO4C_AO&Cl#@>ldP8iP_cmG#0Vp8:/mfS&%E<_C"dN)O%T>TEFn'aQKQ=:<HQ9;FA@YS.F0P"+d0BLJ;3Jbm:jG([Od'dC#7fXbe_>@g).Zmd6q#od_q!4f;8mF_EerdS3N[In"%BU7`H2BOOo[0R(;#7bu1V5%ROi0Y<S/Yb*9gb1;QJGqAK'jfb9-D*++:H&$i!@,pD*/=rSj4bAmDP,_hXuZk5Nkdh+]HMnZ&&hp^%9?+u7-:Bd%WY6:ObuKgPFUW$\%\(NFUMNpt+c7C_Qgc:ER+EYoO7'D%dB02iVeaK*F@u4=5<+UU)X:W6J:eM5@:_q@hD%@+RA*8^%aIGh+AujtCTf>QoO[1CkHrJH9`CWUq8>bGLbiN%p%=+.nlcG5<1A`J\P)b"D_K7>0d9T8R)t>6YLR-1spFS^&Z0n/h=)b`q.?qk"%'SY_`&e'N<ZZ=0ilH21aBq@6=nR9TP/M[l?!+IU9F<tla)FDZN\&%!b^jMtuDArpm?+ZM'k$1F5e:R9;2[@WkDIu>,=d-spY)Jag%ol)4+p_lFTGZDHHr;<?CQCY0Ni,\Y/i0@[i:k_(Nl"-WVV-J/f".usZ]eC.BB4s'^"sM2K0g8M)h(]nJBkXUGPj#\]c=AWiD'h-O%jHOSa20>6(JIk1p^UR-k8>.:RW_6<PPE$*0K;6]S@=Y"'ST+k+gu3sq](AI3'I6")Hbtu5%=5Uu*C*FR0cAf=/h]:QmiieCH5^G(%nr5.@O-HE/KZBLUpG=M:O@L^ENhsg!Vop]0L9N81D?[R`h!k9X/gpA&SdZo6a!d@M4\OoN1Sr.8Kp-Kf=ISg<ct-ra*ph#0?(?M*%Nl-=eL"Gu!]:M'4EFj5)%ZXK`4?aD>M<]28+!J_fA`>[HEmiAn6_;dJKZ>)!5%^lAlZ%b5H(0V`n\r`o#2j2(UVe9&(V]DU4c+8s%9D=@e)hT/gVo+3Dj`47p+>5,"E+Mk!,;6W?C.p/uq*js--5G"lJ0o)<Q^=.;IUXm@X?ee2B?9!;@52c7dWNZdX38.*oUdgCEgiaP%pGW^<\IGO"-HBW;UDCH.Pd/MHdqIAY&`^jHA/aAP,:&2/E[gEX3:&.KnH^Q)'X.MaGQ;F*H*28.,@)N^&q[b))JqUQeI4rH/\.Aa%kH\neU,c.Be>(+d,G+OHd^WO_T+RsRnu.8p\Yi>_&40QR-_s_]_\]sLY=,m02%gFI/.T9XF?-3Gc]^I\+K&lZAM_]Iep&dr'tGCA%G:ZOjkUnCH#Hl96j$7IohO;;K.@$=O*7(:q)EtOe_[Q#6X6WqiCe:eq(YjM=8V9/;A3;YX-l4WU$KQbF1XfSfZJfmu["OG<hIeup%6tFiqm+/`q1ZSGdHgS5!\+:TK*$FFt_Fl.BJdW0SX&h;6\k>*NK8R150;G_s(/6dRE0N3i(&I&-<U(!l*"bSk-gB@]1'F_fKmJT?%Q4K,S1cAp"6Y&fJbq(S0`b$!76RrtchRj3%b7?[b&Wiu<Q"7r*-,0[leZ8a<)/tX!q5QgKRq#:r8ig;L-Os:RBg<mr=ZPVi/MCH"%0,gZ9!H8g(;*-BnTIhY3^eF[m*;\TNa(r!ep>tl+rN8n0NX$#k)&0-85</q&c(N225&K!ieo.Q6I.aWm47#"P`FM6.R!TJbkEPQD%MU.'_K*Dko)*>W)&sK(obQ<3YVPLLaLbln4Z*K<<3\l1R@kEFm]:*6r]>rpXb6uW?*5bKANq"A(:iJlTfepp0-'X'EVQuq(O&0dJ%(42_rO.-/I##uLY#*0S<Er%A\'2@pB)@4BeT8E5WmK7;=+0NSZhaJpt7Dgd<7Tts3HcBWSJkQ3,)o%!_1#/8J;O,\WPcL+U;mlht%l:k@u]DCSpeD3qUWZtRY`Bdc=ktb0!aPBjVLmc\e]=Pnn8[!K%h8MV$Eton\((bV%J.rVI:LC05;AFV0SCd+`_`ra(f'@BJas_uG%X*o/A3P-7%GrWV<H)[$'IFagV*&0Lm8$VhJQoCOJQqF8:6G2?-k>7MA',VT*UFA<D.VSmfQm&o21S,Q9d:E[$K>'E7kGYDt)E/%l%-Wq<E!sc"Gac:g%]<^iP;\h1l[=G(%@3?sHc-+TY30!QdZG.Yg"ftZ<<C-&J8Ol/Xj(<PmB2iGcNM_kV'Igt_Y`NIPmtkj8,2*mk%.giU1k(l4#(nd?egPth@5\Nr+87.4FQZOc4L[JPZL^\^cB8PS<E^&>KX$)R0Y/f0nP9.-1aqUjRPLf"i>ojQ2kt4R--!=5;\A0dG%Wf-C]T'0jT5p\2F$StaP]9\E$WJRmQ$*SIa=<92k't9HspI+pO@c,E2Ltp-(-UIY!48Y2l9aXL#AU1e8:]2o0BZRTmkj<Y;osc93%5b1@)S_eLgc`*:\H0(CM&00mb.l^Q@#.$\>Z^fE6:<-3W;PlpH':B\]TGB]N\1St/?#YP^=4HJF4!MO'`AaUoP0E#&-FZf\DtoNM%oIIS7E\Tg-9ot66#kW+[nS(MAplL.g\o)c8+\9TKn,8(6,EGuT^&0B*S</8a%NLe?`u:O+-a%6`m)ec&(rtG`mVZMK`df6o.sYtq%SC/IMWpK5[pmnG48NegM@GQ_pLlLo.Zg8kXE/5MafQ3O@*UQ%$23<_@;%`eI.Cc"*<^p'tM7MhL;a]6?5Zll5m$<<e6`UjCU'[*2%l>E=f8.Uu'4l`D/N!TV)Uf70$UcVN'*<.sgai%R^P&^2pWV]9OZ/KMA`NQf9N0*=t_Hgn?Xt'],-%3k41A[K%=!id*2mS-k'2ht<%j)uq=S,r;1Gnd@VPphpQDn'rOBt*1pl`*n.5$(]P[8O<&C2,^ictK#6-&&k:4(CQTd']a7jl`4:Kl^#-6Z(X!O3"@u<Srepqe7rU%p^"je&JAJ:OLsJT5%#`C\'T5NG88/e0I$2I4B!4Jo/pO'6@Djhb%NJ;aRc^^OIJm9S5)'MY\?,O7ij2Y$9,,Km50JmTUb$fAP)Me%*f#NKVh:ILgAjQt(.N?<R(A>qqQstHZ/#(9^E)/XWL$kiZf,#a>_4O0*aU'3E<-tX;\#8mOuE(LMuO;)96<7>Y=,<LY/h"^7k)MD%a"<`'#RlZT0b2chdIf*uaoS1s2jMe&9'YoC0%RV*UC!AuhP8$&h=BDXcXE-3/ckWEHkBAnSK="?ff=iA'OOeW?D-#ZoPSbA;_2%2%V,7sjHp-W9W]f@tUj'W-bhP3Q-Z<:30qf.ha(*_?hAIHkimdBOjrd^1*+<MZ"?j($M94"FT8b.XC&&)R5j<;lVS=XdNm"7%&d[eV%qN^j4BMf+tiOS<:7':ub:'VJ*[/7H'J@'8RNo[47A^VG#!1D;<Whb*Pi-k3o"&%5C%<Q]/\'",OR0eDj%`h$O[RK#m]>VV4/\2[U%79Sdn'\B_XbLARd4^_ZnNoVmSe!kEs]o_CIH9)2:at-(hOi(uQ>=WtG7N?.0@CD=`S$Lg3d2`^^!g9+/W^k8meT'G/Tt5[f$prZ]%.D)0_jcja^Adnl5CG+%QaM'6(q*Ms'iF$A*=7Ht6lNig-WStE.8:=GThp`,CCLZEJ.Y;#J,8$W"`cYGWs/8gKrViPYj]QC@1+\ct%>@!=oCFX*I`ss<X1i&fEp1Gf;!.Z%dVmi4l/D&hE!s'V2%io:jl).]F5'U1\SKr+PMOC$.da$UkOnE42(:;G?K7Z+DU,0be6tk'"%i#G5>RED\:J0DAVBplVQA]L:EEi0s/@j\u@h7^rSp&rBT$6Ud^XfeH<=f%BF64='OUm$Id*gA"!OsVkh7%42;!_fu2YkC+l*A&pX%3)XXT_]ucTdMp%'@[+\,U',a\qT)#)-5>2_8X]+B5,aF^5-3Xjg)u.mEVZF-#Y*JlM(%B263/Vc%'Tl4m9L""=*)D'Ei^6Ff=<a=%:JCO''7_h9?4nIV_Z;?>ft2PZ5*t=UP&VCOU'Zi$`i<*aV[S,<NeAbO!Frk%Yu=26.!L+XiLt=G'1,/0/Vo-PjsXNbk;]jgHq6II%0rYrT\Z$M-h%Ei+Eq#/kb#&=R$`\=2hVpCt!$go_[%\!5\SrIl+aX!;(qYfqoO0BJm@f7h/rP.?hoXauMXt+"J0$L#C4Q.dn?`cP%Q]okULYgn/m=HB`AP3GWO5@u7UQRGk3JnPQL@-Xpd31`"GGY^T.?^Ni2U"'i+>XtJ$V4ag;p=VICj\8D+(+nTnsQf3U>\<H;.1W%%#;mhnP,eb/%*T_U/NR+!lmtA*cRGlLKpI.4q,_tYFdq_:TW5gN$\Wt)4\']Zg4*#NR$\:Q(0`G+-Nql;I#dPJp6$0B.4@P\QsgIC%YB!$O&+ObA!Wu)T>(bIYY/HZ6OdLlLrBPU7&6nH[C3;8!PGC_kJX)q!F-6>?^j1TV3Z5=FQLm`;h,R12WVfgC8;#JV7qef]ask]^%FJD\1Ojm1IWM[?$g`gKEYqu2I,kI.S-ETfY>pH>R84Zc9bd1g!64TL6dc4IDLLk8`r`q-mP<(Wbd7r_qcC#^mafj]P6E,^>C*\?C%+N"KJTB]-,2$\La$^D,X(;.08pZdI0,W4:(Blgl.jB<*l_S.SM(6QL70#^.:%+[;"&a9\UpQT5MZ]qG>nBc>^X:%JL2#6ArjR="P%r637b-:`B[;?W*2jVkV(a$aLSMpAKAIoa&S?FN_uFYEqo%ti?Eh%aQqN!J1&iD(FECl>/(V'`aO>YQSIXV%j,iAjFn'4[+@A;[S@%g%s8Sr/3A,hug9:[ML=bojrPZ(5.T7RNt$I^DrAP#n-NJOWeuYaXW<LbPomZW;88+Mo0^?q\MFim2m<99me#Uc&u;.pb*T#FT&4Z%4:V`!U1MNpd[`bgQq8.&_Dk\Q>5GQ#MuruI?`39nO,_Xp6L$d"LT[(Pac/K,iQeuE>btbV7-@If<26t&^9dr_>gZdcjRbumDA/_4%9S46"VsIq>1nnb4<OI)%?:&ouGNF,G2lH6sE(k9%4'W_^j)Uf^%F<>4<,rS5_95M),oO:$C\N[*afm@?Fd>oCaG/s+Z9j_>abC'A%;WIHn+HeuIG:*t6R@T^<$TY"J^d90lSNM^Mf"'GGS'4ul2?u6qO_UbPR#fp*8aQYIQ/TiiCdJtB-S?WBcLIP^9"^(m&[WJtH5G6f%*+QgLAC)E[1G,W)etb#heh5,Jkm4)XGGZi<h$56`q&e$G;^IopOaJi5ZD`T7g=-gVdf%rGEh<7/>N4nq#n\"QqD0kRnmUtjR5=@s%@C%PL!2cfC,f!BG3EHilP/E\>Bc]stR\jQ3+^S&-6P1`.kAs<B6Sn0.'d\*9]XshAYT]pg5Bne7G_D1l0qHjW.O7\Mf5#bp4P>Ra%S4<hoa03:+lOj)Rb6cn<Y03WCp&4\kG31c;Tk>FlJ@Q*6=F`FoHlALFkqXNb\.V*\,QG^Y'g+,"$"ZT2Ktu.qcL/+r7YW,@W^h*^%/4p2^8&"de;!2@(MYSbLJ?H@f[U58/6%$ALj+ARH*&.8m@@hh+RLte?^cjY-3S,R]iJ>]ZfQoI9Q9oKP.kD]u0Y"gb("S!;]TqRn%[[s%4$gdDX^-70^R*b(djaUgNSMFb`8m0fQi0;i9L)#1d_o'QRn;cHs7LO7aSHtK%VLS$dV)c7SHW1Yp<l)P:0>-Eb.<B4@Kb=Gd%ISfV%a=V'Ri%.A9SO9+YN7e<-N21a]AcX4_0I.t&jrqTtZg9o6rXefnO-&YGl':mI??dbrdIh>gR6_6P3?FAa%C<2%h,P>d%nR94%0l?@*_Z%h]:m(h"^X+rs:3+?[6&ug6Z8&e.NXVFn`+Q<%(j*NPd##TdK7?!<ctQ9;KYCor"6VVO%fGm''InaKSFUeQ9c:[hDl'GP%k2YM.]E^0kfOIB,"_"PkjBJXu$RCqf%mSd@r;mhTm'pB[!!gI1VCM$9ONUBmNfn&0f1Qh@]i_Br"77UTCQN.FQ'W>qCrkDB@15sX%d]@]2!)"Fi7Y9iE;G^eK/pStN,LV:]>DBIO*N%%j$K,BK3^L$Dh9/uCkTMOZbTQmPro=;=lOoQe8u,XQ7GgKM$\^OJZ6Du?R7[Qj%'*5j[`+p4L8cb0.*G])1TjmA)U[60Ki[BGt61NeLUC:nA\_ar9@>HD+dj6rFG@"`d/.@uRF$E#OknVbaNH0C>'im_F`j:b?mJUs2%gG%ob(>m/jqQ^iD-1CPL1EP`4$?-N;Mj>deO#%p6^h<@tKqb[TjKUZ^chPg]*6mdnQdK=o`D"@EIHjko-+q])9'5B.+r+K61n2YS%CpuT_%b=2WNPB]j'EBlfa)SAS8q`9GoU4qJ1<"j:d-n'.Jn1;(m.mdmP:g"e<'2c9ddU\DO9%d@66Jj/rL&WBdpt3ZF9HV*V?GTa%SRL>eI[]V.GUQKSXUe/u=L;\:/u?j0QYRt$#h2YU)FaIc+RINn\LSgimp+r#SRnI9AdkU(W/;V?;Q6E3GPLYt+2L%NTT&%##]>NT%\jaS#eCUuU$oJ&c?$SfJN8W3hE\$Yndo3K<c)T6/'sntGbJ<V;72Wg]aCu`5fD+oI)@\*][2A/b_RoAC&\C`M,&LBJH\c+K]^ZmV%cMsT5?`"Xm)*i5uD$%hDDdN/eI?*!Mb4&MumQ[MQ."r1#h95_q6)e'FE:FdC"!%9&SErBZbF"uR?ec%),=/AdQ-\5o*X.A`pJ)(p%-AI^%)2Cb5)$(Dg7pV_H^;$&dEMPshE'&Z(8MTn>S7Q8?cd'9l#WT%>M<X)@N6<gUFtVTIT#W5HUK;Me0h31a<Ocfm,u;rY]HPQ'%O66QH:Q21(X4bW``n=?o!`9r"%]2!W2G5>+?^FM`^7>!R0n1SY%SjL"!2aL[kN>gXFGRI$_(+cD[pccM?X@24i<Il'ORXX*4W@*9%f],ElcP,Vj_^5-[3p(CelbFS.X@^#K`i`e'1plaJ>kTOsZ^q5?DA_W,7'bu<4Zl!n#?1=[2fL[9OjmSPq_%_d1bC@?WDQDb_*Hkd%q?6M:;9/&4H9CZ^Q&LW"V_FuBrcuO&*=A(kX!)Zm-cLgF5q1Tn+eb4p+s+TS4kE$fXG^Blbc.R^gdgYG9S$euF,/SE_P#R0"JO3'%r6/N@q&lT;ZcL,_R4C%0j`h'+a<5Pc4GPBuEL'AI^GZ4@%&ihcGlPa$&rlB+:#TJb_:olB/-M#V-WF?c3b:%@"U'5!%;Fhnj11#;%>+pM#rZ:Z+&7FA/Xc:0+<CX-n%@U4'DG<!^fq:I)k4'?n%phl6^;'YN^R@kZF35L1Lfaor_-Vab4fj`:iM5jf=(FdrW#j[]nfgf)%p.@tU3>\F(On35bC(9PU`K[P>!1(Z_.E!eXh*[fGN?!/<\IIg(<,13.Bh1"^5(kZ7RO:SscpFb@q@2]]`I6Vc]A*r*!DDluI4STh%k'\c0f'p$4X*YVh3YD53)haBHOV7<EJmP.\1n8HHN7Nkg6QJ-0j2%g6`(&Lca1(G[V\4[s8`oG*pL*pT::',Y2@p$1kIid[%')8o%R^Ji(N&)`-J_#I0ZVL7[L6<uBn[TVM@3p8b2AG"5\jTk/5a>a6qg&N7cK3EbZVtQAp0cjURu[RXY615akmZ/XJDME::0<?*l5UJ4%Z:A:5@6S@3nXQnT(-*stUu3;7JEfihDOY\i_iC5?*:KLBhR@Bd,.!t,:D<(I'oE5W%*lC^L4d+H:DSU:k'!4U"ikCgFKlLQYE'mI%AI%-oTG_C[@cs.4U139VLq#XXO1-Og4s$HjgT[*m**fmRSEL\E+06T,gfMI`/D.3:[lT021-&#.V##_]oCKQ,!F=u9hnO#1Q*Go/%U$r@(2af!oYAN);L"a+I(4GlT%]T3sDH6.TmV)<C"UD_f%c[ukm!b=JFDK%iWdO0#_q0Ei9R;Z4JSi`)(>$A]$I=1:]'M.SOfrG#%C?"K69=_24$]X.O\h*a)o58))6uZ"5'*7F5NY?cRX(@2qVC!%1g*1nfS"Nn5h\g4Oa_1icc)Cf?W%H&BX%Eb(<JSksA'2MNgQPa/%IC&O=[mK$IN0PBl2S@q(bHPHHWd*s?jW(+qi^[,INO]XbKuHUpXgL7D-8'?.d=:P*DP@]&9O@_2&G.3+IV\RAm4C?gGUs!A0%.*<%^ktX4=bC0(=MS)F()H5OHk3OcUESdO[WPuDC7D0.n7t'<BMSDa7<4VgOOOB;?gGOG0r@#XFT^Ed;pBd^.NA"&P^F`f"'6g0<(WK=%(4_Ep@cj@Bg"KS&`C:e0YS*9jRN`fiAs.*QD?1HLoO8`&%6:8ZKgm\l`<K?d;AN\:$nq]+B`WJ1&ei7bo40s0:5iY)ZU;"&p+hRe%ElH[`fZ?r+jrnZEom&Us(G?I]7#pF>!^kopDqfUM14p<^I1>`o=Ud>`AaEn[^%IVD\X(fLI1UJ&H';^i?Gi'u$<h>LC?59$%APt'%I[f02#_ZC<<Ze1ald"A=N3i#$lADrWF@<Yu+81=GN%,,n1R=`oA!]'=0tg>n]7DE*/?f@6Vfb-js!"`h'5A&QSc4)Q0*<]MkCpaL%P)>3OiJtMS_q6IF2VmPB\dgo[?#$GdYK'!I1Mis72`Hga_$DY2W:rWgB##n(@7/^!f:-/YKT1##:KJFbC6gAZN'FcADp.ah]S`bk%;WeGS3GTTIKg9%m@k)T*RMQne.-i=IL@lc..,u/-=np/aW=2`P_6dOYU@u<Y?a&P<``QO]?m4+L^iP&MW".h7Ga!e7PLJOLHV2B,%(".]"=]"Rin7=s-m)ID!Y2EA8K`L/MSelR_>Oj5Us6<Jbfd6lf6A;A:SC1MNYYbXg*>SWC#pq,bcW=6Ol/Re8KbUaTe\9_PW17G>%;)q1<!%+*qS?/@nJJou"(0m<T$UJ-]WCT8+8P^Zeq<eomJEknU69<I'4P#p]P6[7;7Ppe5%CqcA$_h:XHPlD7\oU(I_.-^%*[BWp%86cJGf/Y4Yo5VanH097k?*qq^.+N(I%@U#!bu`)qI%A/`Ddt"=qc46k2?(6u8ID#)f]o.0b,QXneCef?e>%3;es5>.A)V["M.7=T%XHg.5]Mqh+.+f#>ZUNltp@u)MNVAp9G'a^'h(Y5opXTGmSQWqCbi6J\eChH25>35^m(TpF`cS4^ZVhC%>Y5>)PM\F*B)sYsX_2OC%k8Cid+s:\sKug*A3g"(FL8C$aY81IgM3u%$7F!DG[kSnjP8.Yla?R=+fJaQI$hHYOk(_PENH3>b^1>AKYIff4#t3m^fe@l/O;c8R%5k?%Z[m8_c74,'JpEJfQq$\:e09n]%7)*/PH2=2aNCed`YQsL=bRk\LTGh\ObK@bSib+0A>di!b62FhN3h8J>pH*W@2hVSE4Vnqk%Kc[1&M(lun_eC8_TkA&@Z@X6fWt+6WcIt+%0j(0GL$3mTmd=FNn&0=N<8;M;W`.&l^nd)1c[G0?f%B$%=Q]:<1!''ZqG&^gdH>[#%!7gEun&>B+'/.=UauDY,>MkAA$WraIKuKlr^1\Dik3'0G_(=/\.@?r=Q\#C[%A:O%<HEQtXTt,YCk)>*eIC75YjADCD$'e!9!rMD%!R!C*YcnQ:d?un/"7p;tD89^d*O,r8O(pUEVLcEZFi+%2c05%JK[e95qh>["I#e(O:Qnp_h\41n!N+^!OhP*,2dl@XL:QahU'0iI%D1-<YTNE[MB]?Jm_8:PmRQ%2.k]U?:?pH9=Oq];#&D2-l[lV1:30n/^rdZ`2m(+DC3jYsY!EI,bD'KEhB"n9LFU!;tkNJj\ob3Q,%kdqQ2N%d>1I04=[Nn,hdK$OK"WF<M;X`9?QRfQM/,X^HmE&\'Z%K-jf7u7.$oZsbgMMLp1bi-6D*o?3OEBm`8>Jlqal5l3Fg9>>S%G3oBZLH*(f,F8N1b?3m,V^F@X#'ab.L7>HU1#l+P[fOdmm5k0nMaW*4@Yj0%VYu6Oq<pD[.#V$8'HGr%V9s,LJ=pAHqMO)k-gb,t%XH1F&jO#ZT3K31l^R7/ABK_.l0MYTb8;^.gV=25*V2H9lN^i+X$[\C?rGFX:GYI@MZD<`43B%B8.\X-L=7NVtTj>Yg*9;dE8#o*R%/Q68LH4+YKBXOt<cqYMBmK)(8<G>9EcLDfV&"^?W75L^3>%THGn6SPu"H*<2&:nX<iA[hd?"o4U9Ods.i<(9.qAS!G"NctDNNs>Z%2fiBqO9YDB@PtASO($qj)gj$0`jH9rqupMj5<"6"iRJc",h98ZIdcGdSs9FAYhjgC0rT&L6T8O!3(Q"!*&`aQ7aE.kHa)MVJZl'E%ehID@Re>(3<_[Nk9K,@^MkCFleHbq'<n,G7(2()\Wnul.h'suVV)W%NR(n2YHHZ1i-5,36iJhD_Nq#Ql:8h34YOg\_)s*bXB`2OD%,@9u<@bWK1e]Y7;CDgoCFK%/['<nRgeEP[._QG\3lYnr&DXMq!!Ge<6=R=N.7<&iCT3Gs8<NL>#>,>SIF$XjO,D0b[WWdJoNT.B:%13]la565'@VqndU,brM)gI`R+N]:RtFPE2AaX[Mf^W((oY#0i$-u+uXFP)P]^p<RJ`Q83Y3@<tq%@1LogN^=Rds1apNIrQoX>*S?%/\J=D55,Q7%lW0Z@p2GB&?"p(.:]SuZF8RI-LeX8D@%=!N.U:05Z=ORRr3/#9XbsOe*Zk#7SUho/S@V$hhu%36UbXLj>,MrMYY]a%\)Fd'aSH[,>I9YK0K.Bt/NO?M)eR"TL*U>FRiN=Z`Vh?IZY`%Z(!GSOH\\t;mup[#p?1\_UI_"$88I=U(^VhZ\`Ru:(q4@-DJ+id%H7dc^[LW63(!MY']YWenX1'Naa!j=)BN]&Y'.osIde+Jep.ijQ?75QEnd6=_ee3N`h3:A3aIlL1T#!NZ]hrqZ@0H-P4(?$arGVO4%G61l,daO4m]?S3Mb(;Q$a%!/1bcB-pIH<VugL^A]31^+.HVETA_INr0^MR'gAV<SW8<#O9(2%sKTa%+bCeZ[JBY"mF]2;;]#'EA>%!p`V+q%?nm63B'8pFe?,A'L0!Labk=<OoDlS.T^_(sl%i02@]9LP$Qp2D:^qP387F28dVXc#eMFS$0P7gMkJ2@/G'J=HBhO?l8^"%Fc`"f*+Z3_YL"9Z?s[S4>4^`/EH;!bQ84luj!6FCD/:fJ-Q*cejALp4i,a%r.Lg0@2:(,R1M[U.REp#F#8ro^9"qD3!R1]P74'qL%crT=TNY,cBCqiOlfrJHnaEESH=<'SjP$jbR>E(e6:`ejO`_W<Ao-L#D[3&jIAD`tk(rfn6qsBI*pp0F"*l;s*Z(JIZ_;l5?SRE;<%c7fWa1X&7aX^QZrfc$f)d'qad9%E:hfQMXE<5s*TDU`t(TTuKb<+j\79FW+MbKmJS/(CWc2uCDCfGG"-P`RXq80%nkj)u[60M%^J%59U'm\UHk?M>POa!)pVTF_8MfPqaV%%7$dFQ.>;!M7HOAN=?oV/[_-r)ZnJ,0s(n<BX3[d'9Ve$_qM<qe(V$7[Pk3'`@6"ZD-b:d%Wa9V>-^;@,]&0Z.OLFq$k\>nQ1mYD_pEO3RjoFimd[p16%SV^,ec7(@g'P\sd6N"MCOg?=*8hdu!PVmI)DjXe%dC#rl]AhQ57cut%1^=i<]Zbs"$CVL&:eT^&:G/ig@;SU?<eh-4.P6`<E^Qc'ms4Qm1nURb@1Qdeof9[C89#X`Cstd9nOtu8X)6Wbg0t(g'q3LNG!:N=%rrQ@76He[n9-^l3E@+m_."7]r;:uN0eaIdfJ2Ikc`WsjQM"f9fE4rAlD6mW9BcE;Ck\Ct#&8/goKpRT;Rk;4bICB&3jCeLGq0VGZ%W\`7]FSUOF^MP44fOMr/Y>/k@-(b#lYVc:OL599L(H"\R<hg+%[J-*7p#+$KkCSfe3]_OP5hlY:[I%g<*FlIa%^=lHJ8NgS[N<p/%X9T,8lbUGI4db[E[ak6.2@F,r[S]'n^BX:]k)`*Y'le@4'M2!LDM)1AmC5O:EbF,2KI9:G2PgXCi:IbuZifh>DSd-M,Pss(4hO.>%5D?dJQZcc$^tSL$@Q`$@jbh,f[j,hY)_u@!*E:g0]?#2.`:/bS[rrnRG\g"h0SYLg>C2Ft&_jE.R'Ln=CHF6_\92X9:uZ&r[bhX%%gGd4*p?b"T>]!i;N2s'[PB"!qIU:g=>0`%QB?HEH()ANUBW`V!Vm#>hUX"epLABiC\gJn-WtQ<2C3B6]\[24ej<ICH<Gtd<3`?%g%XV%@6F_7ogkG9S.SQ'oVH;1pOB$["s=$TI1ie"tn/a6A9Y&8$+b4Bn$i0&Y]8c;-*lt%)Aeri>*m`cOU86W;2jKKd;EnHHZEnDK>%3G\tR*9O`=ojS\N>;'U1f6X]p[5_ER0-XjFH3HINSp/+4FBF[5<8.i=-^f+r2up8uH,_g[^N5>9OU/p$qD6sR6Bt]amWFpD=ERcn%X@j!7N`XSR0^+Jmqn'p%q[&qhE"P.L@3H6CYTYgD@Dc]A6YH&&UZrl]J-m]_:..+8iJS^:meP<l_H2g$0J]!'+9u?f.mpX$T<&gC%As`Z4VV'Pp>@]gd]W`6p_a^H0hsQU"gO3+I14P`?p5*mYT2XI=KR1h)FPFRa]U\=%#akOA8_H+\0H[skMEA'9gkE_=4(#r()X2*e%/^Npi<N9n<bef:>G__/73trApLbl>k+$aLi06f'S5\fAL0nPQT&&79*=0O>(S(nO?*O8Q):*aiiHQ,RP2+uhh+FH0>T8EmnEbGc/%4uY2aU1$"$RjcWIG=6gr*0J9.8W3%>44Q87FDFG-H57M]l"-N%:r:L>;BlqQL*^m>Hb5fq/KI_=6*&'p)$m6I,U'Yq.f#+j"b%P+%e78J5nq(D-&*0BL1HkBVXCJlZ`X`I]F5-K([Lgj7pl,S+-4AM<b8(=*&U_p;M0R/JAY+5k?AB^VVCXj5(bbi&S(AM'eM&as^S9$4%%?[B-%-)OqG76RfW1*GlG1q5[Ud%8qcpaS,qF$^>3u[5XMoOd0M1KcEFl*.DLS0r0h)9<3a!q8]NZ<+0>ZcF(Qj]sh<CtrIim2\e%XQ6h(TeUF><I1";-j)QChBbD<6==nXN!GL6hcA(+?d0L$A-'to?^bCZ[WOt<F:5Q+Lj24C+m.\6($pWe]55QI+l9G*hr6d26;4%I%Y*RWtYjVCuRfJPQ4pIF!`s'^N'`J-8,qkqa+JNcB]/Cihaut?D=A%O[a]LMtH$j3,nV0#TGXK^R!(*dkc>Eai5DO&o5@t1@GOW4o%J7M&*f[I@J/S%<]Dj[;TM,`5J)*U_>$kgt%:fN@7ib/;pf&qEBI4T%i-MYkH\(AuQ0EN'bpUBh%BOFZ%,=7[c_[Dmq$6W6ER.8(A%Qg*6M;4p63!eJ@5ZnQD!S&r>g3+PHKSSKoKo^J2uD^RmW#Q?^B\BRR!IbjCB4FLJTU?+CuJQTj/O>Hs5`OVYd5A(Bl!"NC=08KU_%opIoE(fkYI$t*2Vc80uZ_e&lNSkYF?GiAg.).$rh6GLYj"Qb$6qclJ=YMbtR4qhHB*i*ubpH!hu;e*M*<I>oM!_*1-L<KXPKgbu/%LM1kfiYV*p,IL_U_[UYi"#,q&*5R/,l#I@J%/=).AuI\@TgLq1pHD)$!27-nN*tkr[1>3`,8`J@`h<nc)Z:+$"eQM:XhtT(Bkg*k%T_oTZ*n+YJ+WH#OUl8\HB,i.1BlX=Y\kLd:,D'?H@Y?E8Yq"7^@6jRVVrAg'%$=,ed7"H&(Rbo!!C_rVkRk`5U`M]_1PgTQ/mJ+s%4.g:3m567m?#!BeL-$1<[80hY0moP-o7Vg`e06ih(cKTH$uF`<*952q_Hkm&@5s8JV&<nPB1=u5Q4`N">?e#:aqtL`D(.ib"Z!/[%aYT#e[9WnjY^OLGG9Ff*(ECMHZ9!<IJIJT6&]jIL*VKR9"G*"/h!Aub=O7R>'41'*YYI2Xa$JD'H:"UGmV^VI8BQu.oRlb&pR=`=%31$Bgb^b3J',#+Xn^=`,#Pa]DV&'"0T0,JB"S;e\W_D\BNo6J.Y]TumG,0M+0Z!CVC@0PZ+"UrJLc<QE"#SPe?@ju?6]!;57?\51%P>8&,:$AAaQ.]8M+5@F6%lVYu"!Z8P`6lTUi/<"Km*NUWC-\[jD:=V7%"\qW7"]Qk"(,L,kXe898Ga3Rh$`cbf!GpNHU+6+_3F#5%oomK\!9?T*g]LMHe<d`%6\r3X)]Jf`KB$Ut%g?aMRsXXIoODY6laQEXGCTYd+92=F7Xk4^Wm/s4SXBZmB4a!;7A21S*tp*R]"B-N%\Q@F0ns=8:s7#E2hu6ROcen]l?QVN3oqu/Ho:'Y_r:&#sro'c)q=Vf.H2R=#[m0fda8c,&mDiR_q;Yh2r6%lcHN)7F++F1Qc[YcN%Y<T`!q7lt)ImBTd`6Wr.iHN':a)Ctg@T@eT~>%AI9_PrivateDataEnd